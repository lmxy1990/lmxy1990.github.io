<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lmxy1990 &#39; Blog</title>
  <subtitle>love code, enjoy life .</subtitle>
  <link href="//atom.xml" rel="self"/>
  
  <link href="https://lmxy1990.github.io/"/>
  <updated>2017-03-22T02:30:28.177Z</updated>
  <id>https://lmxy1990.github.io/</id>
  
  <author>
    <name>lmxy1990</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于Sprintg注解与配置文件产生的bean</title>
    <link href="https://lmxy1990.github.io/2017/03/22/%E5%85%B3%E4%BA%8ESprintg%E6%B3%A8%E8%A7%A3%E4%B8%8E%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%BA%A7%E7%94%9F%E7%9A%84bean/"/>
    <id>https://lmxy1990.github.io/2017/03/22/关于Sprintg注解与配置文件产生的bean/</id>
    <published>2017-03-22T02:24:03.000Z</published>
    <updated>2017-03-22T02:30:28.177Z</updated>
    
    <content type="html"><![CDATA[<h3 id="bean-的创建有XML与注解"><a href="#bean-的创建有XML与注解" class="headerlink" title="bean 的创建有XML与注解"></a>bean 的创建有XML与注解</h3><p>最近忘了这坑壁事情了.如果是配置生成的bean.里面的对象又是用注解注入的话.必须用扫描.</p>
<p>不然只有配置该bean的时候,去手动配置该bean.</p>
<p>之前遇到过,忘记了.现在又遇到了.搞了一天…郁闷.</p>
<hr>
<h2 id="End"><a href="#End" class="headerlink" title="End"></a><center>End</center></h2>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;bean-的创建有XML与注解&quot;&gt;&lt;a href=&quot;#bean-的创建有XML与注解&quot; class=&quot;headerlink&quot; title=&quot;bean 的创建有XML与注解&quot;&gt;&lt;/a&gt;bean 的创建有XML与注解&lt;/h3&gt;&lt;p&gt;最近忘了这坑壁事情了.如果是配置生成
    
    </summary>
    
      <category term="spring bean" scheme="https://lmxy1990.github.io/categories/spring-bean/"/>
    
    
  </entry>
  
  <entry>
    <title>定时任务调度</title>
    <link href="https://lmxy1990.github.io/2017/03/16/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6/"/>
    <id>https://lmxy1990.github.io/2017/03/16/定时任务调度/</id>
    <published>2017-03-16T09:01:14.000Z</published>
    <updated>2017-03-16T09:27:52.606Z</updated>
    
    <content type="html"><![CDATA[<h3 id="定时任务使用的方法"><a href="#定时任务使用的方法" class="headerlink" title="定时任务使用的方法"></a>定时任务使用的方法</h3><p>1.最原始的使用java提供的延迟循环队列.<br>2.使用Quartz提供的方法.<br>3.使用spring提供的调度器.</p>
<h3 id="使用循环延迟队列"><a href="#使用循环延迟队列" class="headerlink" title="使用循环延迟队列."></a>使用循环延迟队列.</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ScheduledExecutorService executorService = Executors.newScheduledThreadPool(10);</div><div class="line">//启动延迟,初始化延迟,多久执行一次.</div><div class="line">executorService.scheduleWithFixedDelay(new Runable(), 0, 9, TimeUnit.HOURS);</div></pre></td></tr></table></figure>
<h3 id="使用Quartz调度"><a href="#使用Quartz调度" class="headerlink" title="使用Quartz调度"></a>使用Quartz调度</h3><p>1.引入依赖或者Jar包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;!-- https://mvnrepository.com/artifact/org.quartz-scheduler/quartz --&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.quartz-scheduler&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;quartz&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;2.2.3&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure></p>
<p>2.配置执行参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;!--配置启动的bean,task以及执行的方法--&gt;</div><div class="line">&lt;bean id=&quot;job&quot; class=&quot; xx.xx.xx.Job&quot; /&gt;</div><div class="line">&lt;bean id=&quot;cronTask&quot; class=&quot;org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean&quot;&gt;</div><div class="line">    &lt;property name=&quot;targetObject&quot; ref=&quot;job&quot; /&gt;</div><div class="line">    &lt;property name=&quot;targetMethod&quot; value=&quot;runWork&quot; /&gt;</div><div class="line">    &lt;!-- false表示job不会并发执行，默认为true--&gt;</div><div class="line">    &lt;property name=&quot;concurrent&quot; value=&quot;false&quot; /&gt;</div><div class="line">&lt;/bean&gt;</div></pre></td></tr></table></figure></p>
<p>2.接下来配置触发器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;bean id=&quot;doWork&quot; class=&quot;org.springframework.scheduling.quartz.CronTriggerBean&quot;&gt;</div><div class="line">    &lt;property name=&quot;jobDetail&quot; ref=&quot;cronTask&quot; /&gt;</div><div class="line">    &lt;!—每天凌晨0点1分执行--&gt;</div><div class="line">    &lt;property name=&quot;cronExpression&quot; value=&quot;0 01 00 * * ?&quot; /&gt;</div><div class="line">&lt;/bean&gt;</div></pre></td></tr></table></figure></p>
<p>3.最后配置调度工厂<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;bean class=&quot;org.springframework.scheduling.quartz.SchedulerFactoryBean&quot;&gt;</div><div class="line">    &lt;property name=&quot;triggers&quot;&gt;</div><div class="line">        &lt;list&gt;</div><div class="line">            &lt;!--调度多个任务--&gt;</div><div class="line">            &lt;ref local=&quot;doWork&quot;/&gt;</div><div class="line">        &lt;/list&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">&lt;/bean&gt;</div></pre></td></tr></table></figure></p>
<h3 id="使用spring-task来调度"><a href="#使用spring-task来调度" class="headerlink" title="使用spring task来调度"></a>使用spring task来调度</h3><p>1.添加相应的命名空间<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; </div><div class="line">    ......</div><div class="line">    xmlns:task=&quot;http://www.springframework.org/schema/task&quot;</div><div class="line">        xsi:schemaLocation=&quot;</div><div class="line">        ......</div><div class="line">    http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd&quot;&gt;</div></pre></td></tr></table></figure></p>
<p>2.task 线程池配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;task:executor id=&quot;executor&quot; pool-size=&quot;5&quot; /&gt;</div><div class="line">&lt;task:scheduler id=&quot;scheduler&quot; pool-size=&quot;5&quot; /&gt;</div><div class="line">&lt;task:annotation-driven executor=&quot;executor&quot; scheduler=&quot;scheduler&quot; /&gt;</div></pre></td></tr></table></figure></p>
<p>3.task配置,以及调度时间配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;bean name = &quot;myTask&quot; class = &quot;xxx.xxx.MyTask&quot; /&gt;</div><div class="line">&lt;task:scheduled-tasks scheduler=&quot;reportTaskScheduler&quot; &gt;</div><div class="line">    &lt;task:scheduled ref=&quot;myTask&quot; method=&quot;doTask&quot; cron=&quot;0/5 * * * * ?&quot; /&gt;</div><div class="line">&lt;/task:scheduled-tasks&gt;</div></pre></td></tr></table></figure></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>1.方法一如果要采用Spring来启动的话.就需要实现Spring的初始化Bean的接口(InitializingBean).在初始化之后,调用该任务的延迟队列.<br>2.Quartz与Spring的 Task的区别是一个可以异步,一个只能同步.<br>3.Spring 与Quartz的时间配置都是采用cron表达式.</p>
<h3 id="附录Cron表达式"><a href="#附录Cron表达式" class="headerlink" title="附录Cron表达式"></a>附录Cron表达式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">“0/10 * * * * ?” 每10秒触发 </div><div class="line">“0 0 12 * * ?” 每天中午12点触发 </div><div class="line">“0 15 10 ? * *” 每天上午10:15触发 </div><div class="line">“0 15 10 * * ?” 每天上午10:15触发 </div><div class="line">“0 15 10 * * ? *” 每天上午10:15触发 </div><div class="line">“0 15 10 * * ? 2005” 2005年的每天上午10:15触发 </div><div class="line">“0 * 14 * * ?” 在每天下午2点到下午2:59期间的每1分钟触发 </div><div class="line">“0 0/5 14 * * ?” 在每天下午2点到下午2:55期间的每5分钟触发 </div><div class="line">“0 0/5 14,18 * * ?” 在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发 </div><div class="line">“0 0-5 14 * * ?” 在每天下午2点到下午2:05期间的每1分钟触发 </div><div class="line">“0 10,44 14 ? 3 WED” 每年三月的星期三的下午2:10和2:44触发 </div><div class="line">“0 15 10 ? * MON-FRI” 周一至周五的上午10:15触发 </div><div class="line">“0 15 10 15 * ?” 每月15日上午10:15触发 </div><div class="line">“0 15 10 L * ?” 每月最后一日的上午10:15触发 </div><div class="line">“0 15 10 ? * 6L” 每月的最后一个星期五上午10:15触发 </div><div class="line">“0 15 10 ? * 6L 2002-2005” 2002年至2005年的每月的最后一个星期五上午10:15触发 </div><div class="line">“0 15 10 ? * 6#3” 每月的第三个星期五上午10:15触发 </div><div class="line">每隔5秒执行一次：/5 * * * ? </div><div class="line">每隔1分钟执行一次：0 /1 * * ? </div><div class="line">每天23点执行一次：0 0 23 * * ? </div><div class="line">每天凌晨1点执行一次：0 0 1 * * ? </div><div class="line">每月1号凌晨1点执行一次：0 0 1 1 * ? </div><div class="line">每月最后一天23点执行一次：0 0 23 L * ? </div><div class="line">每周星期天凌晨1点实行一次：0 0 1 ? * L </div><div class="line">在26分、29分、33分执行一次：0 26,29,33 * * * ? </div><div class="line">每天的0点、13点、18点、21点都执行一次：0 0 0,13,18,21 * * ?</div></pre></td></tr></table></figure>
<hr>
<h2 id="End"><a href="#End" class="headerlink" title="End"></a><center>End</center></h2>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;定时任务使用的方法&quot;&gt;&lt;a href=&quot;#定时任务使用的方法&quot; class=&quot;headerlink&quot; title=&quot;定时任务使用的方法&quot;&gt;&lt;/a&gt;定时任务使用的方法&lt;/h3&gt;&lt;p&gt;1.最原始的使用java提供的延迟循环队列.&lt;br&gt;2.使用Quartz提供的方法.
    
    </summary>
    
      <category term="java" scheme="https://lmxy1990.github.io/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>windows 下新建wifi热点</title>
    <link href="https://lmxy1990.github.io/2017/03/15/windows-%E4%B8%8B%E6%96%B0%E5%BB%BAwifi%E7%83%AD%E7%82%B9/"/>
    <id>https://lmxy1990.github.io/2017/03/15/windows-下新建wifi热点/</id>
    <published>2017-03-15T01:11:28.000Z</published>
    <updated>2017-03-15T01:30:43.270Z</updated>
    
    <content type="html"><![CDATA[<h3 id="查看无线网卡是否支持Wifi热点"><a href="#查看无线网卡是否支持Wifi热点" class="headerlink" title="查看无线网卡是否支持Wifi热点"></a>查看无线网卡是否支持Wifi热点</h3><ul>
<li>打开命令提示符:<br><code>netsh wlan show drivers</code></li>
</ul>
<h3 id="设置Wifi名-密码"><a href="#设置Wifi名-密码" class="headerlink" title="设置Wifi名/密码"></a>设置Wifi名/密码</h3><ul>
<li>打开命令提示符:<br><code>netsh wlan set hostednetwork mode=allow ssid=wifi名称 key=wifi密码</code></li>
</ul>
<h3 id="启动设置好的热点"><a href="#启动设置好的热点" class="headerlink" title="启动设置好的热点"></a>启动设置好的热点</h3><ul>
<li>打开命令提示符:<br><code>netsh wlan start hostednetwork</code></li>
</ul>
<h3 id="关闭热点"><a href="#关闭热点" class="headerlink" title="关闭热点"></a>关闭热点</h3><ul>
<li>打开命令提示符:<br><code>netsh wlan stop hostednetwork</code></li>
</ul>
<h3 id="最后需要把能访问到互联网的链接共享给这个wifi热点"><a href="#最后需要把能访问到互联网的链接共享给这个wifi热点" class="headerlink" title="最后需要把能访问到互联网的链接共享给这个wifi热点"></a>最后需要把能访问到互联网的链接共享给这个wifi热点</h3><p>控制面板–&gt;网络共享中心–&gt;属性–&gt;共享</p>
<hr>
<h2 id="End"><a href="#End" class="headerlink" title="End"></a><center>End</center></h2>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;查看无线网卡是否支持Wifi热点&quot;&gt;&lt;a href=&quot;#查看无线网卡是否支持Wifi热点&quot; class=&quot;headerlink&quot; title=&quot;查看无线网卡是否支持Wifi热点&quot;&gt;&lt;/a&gt;查看无线网卡是否支持Wifi热点&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;打开命令提示符:
    
    </summary>
    
      <category term="小技巧" scheme="https://lmxy1990.github.io/categories/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
    
  </entry>
  
  <entry>
    <title>浏览器劫持启动页清除</title>
    <link href="https://lmxy1990.github.io/2017/03/13/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8A%AB%E6%8C%81%E5%90%AF%E5%8A%A8%E9%A1%B5%E6%B8%85%E9%99%A4/"/>
    <id>https://lmxy1990.github.io/2017/03/13/浏览器劫持启动页清除/</id>
    <published>2017-03-13T01:55:57.000Z</published>
    <updated>2017-03-13T02:07:00.321Z</updated>
    
    <content type="html"><![CDATA[<h3 id="主页劫持与启动劫持"><a href="#主页劫持与启动劫持" class="headerlink" title="主页劫持与启动劫持"></a>主页劫持与启动劫持</h3><ol>
<li>启动劫持是主页明明是自己设定好的.但是启动的时候就是广告页面.</li>
<li>主页劫持是主页修改不了,或者修改了又自动变回来.<h3 id="查看启动劫持"><a href="#查看启动劫持" class="headerlink" title="查看启动劫持."></a>查看启动劫持.</h3>找到浏览器快捷方式,右键属性.在目标一栏后面会多出一个链接地址.这就是启动的时候都会去运行这个链接.<h3 id="清除"><a href="#清除" class="headerlink" title="清除"></a>清除</h3></li>
<li>简单的直接删除快捷方式—&gt;属性–&gt;目标后面的网址.<br>2.如果修改之后,一段时间有自动变回来.一般式监听脚本引起的.<br>开始–运行–wbemtest–连接–”root\subscription”–查询–”select <em> from __EventFilter“–应用–选择_EventFilter:Name=”unown_filter”删除之–关闭–查询–”select </em> from ActiveScriptEventConsumer”–应用–选择ActiveScriptEventConsumer Name=”unown”删除之–该关的窗口都关掉–编辑快捷方式</li>
</ol>
<hr>
<h2 id="End"><a href="#End" class="headerlink" title="End"></a><center>End</center></h2>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;主页劫持与启动劫持&quot;&gt;&lt;a href=&quot;#主页劫持与启动劫持&quot; class=&quot;headerlink&quot; title=&quot;主页劫持与启动劫持&quot;&gt;&lt;/a&gt;主页劫持与启动劫持&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;启动劫持是主页明明是自己设定好的.但是启动的时候就是广告页面.&lt;/li&gt;
    
    </summary>
    
      <category term="浏览器" scheme="https://lmxy1990.github.io/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>Java 对象转Excel文件</title>
    <link href="https://lmxy1990.github.io/2017/03/01/Java-%E5%AF%B9%E8%B1%A1%E8%BD%ACExcel%E6%96%87%E4%BB%B6/"/>
    <id>https://lmxy1990.github.io/2017/03/01/Java-对象转Excel文件/</id>
    <published>2017-03-01T10:39:48.000Z</published>
    <updated>2017-03-01T11:29:44.427Z</updated>
    
    <content type="html"><![CDATA[<h3 id="所用到的依赖jar包"><a href="#所用到的依赖jar包" class="headerlink" title="所用到的依赖jar包."></a>所用到的依赖jar包.</h3><p>1.阿帕奇的POI<br>2.阿里的fastjson<br>3.阿帕奇公共工具类</p>
<h3 id="代码逻辑"><a href="#代码逻辑" class="headerlink" title="代码逻辑"></a>代码逻辑</h3><p>1.通过反射获取对象成员变量名称作为Excel的标题.<br>2.反射获取到的对象成员变量值作为Excel的行数据.<br>3.写出文件.</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>1.工具类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div></pre></td><td class="code"><pre><div class="line">package my.test.org;</div><div class="line"></div><div class="line">import com.alibaba.fastjson.JSON;</div><div class="line">import org.apache.commons.collections.CollectionUtils;</div><div class="line">import org.apache.commons.lang3.StringUtils;</div><div class="line">import org.apache.poi.hssf.usermodel.*;</div><div class="line">import org.apache.poi.ss.usermodel.HorizontalAlignment;</div><div class="line"></div><div class="line">import javax.transaction.TransactionRequiredException;</div><div class="line">import java.io.FileNotFoundException;</div><div class="line">import java.io.FileOutputStream;</div><div class="line">import java.io.IOException;</div><div class="line">import java.lang.reflect.Field;</div><div class="line">import java.math.BigDecimal;</div><div class="line">import java.text.SimpleDateFormat;</div><div class="line">import java.util.*;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Author: xinyi.pan</div><div class="line"> * Date: 2017/3/1</div><div class="line"> * &lt;p&gt;</div><div class="line"> * 工具类:excel 导出</div><div class="line"> */</div><div class="line">public class AccessUtils &#123;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 将对象List转换为HSSFWorkbook对象</div><div class="line">     *</div><div class="line">     * @param objectList</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    public static &lt;T&gt; HSSFWorkbook ListObject2HSSFWorkbook(List&lt;T&gt;... objectList) &#123;</div><div class="line">        if (objectList == null || objectList.length == 0) &#123;</div><div class="line">            throw new IllegalArgumentException(&quot;待转换的对象为空&quot;);</div><div class="line">        &#125;</div><div class="line">        HSSFWorkbook workbook = new HSSFWorkbook();</div><div class="line">        for (int i = 0; i &lt; objectList.length; i++) &#123;</div><div class="line">            List&lt;T&gt; tList = objectList[i];</div><div class="line">            if (CollectionUtils.isNotEmpty(tList)) &#123;</div><div class="line">                String sheetName = objectList[i].get(0).getClass().getSimpleName();</div><div class="line">                if (StringUtils.isNotBlank(sheetName)) &#123;</div><div class="line">                    ListObject2HSSFWorkbook(objectList[i], sheetName, workbook);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return workbook;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 将List对象添加到对应的页</div><div class="line">     *</div><div class="line">     * @param objectList</div><div class="line">     * @param sheetName</div><div class="line">     * @param workbook</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    public static &lt;T&gt; HSSFWorkbook ListObject2HSSFWorkbook(List&lt;T&gt; objectList, String sheetName, HSSFWorkbook workbook) &#123;</div><div class="line">        //创建该页的首行</div><div class="line">        HSSFSheet sheet = workbook.createSheet(sheetName);</div><div class="line">        //创建基本样式居中</div><div class="line">        HSSFCellStyle style = workbook.createCellStyle();</div><div class="line">        style.setAlignment(HorizontalAlignment.CENTER);</div><div class="line"></div><div class="line">        boolean isFirstRow = true;</div><div class="line">        Map&lt;String, Integer&gt; keyMap = new HashMap&lt;String, Integer&gt;();</div><div class="line">        for (int i = 0; i &lt; objectList.size(); i++) &#123;</div><div class="line">            T t1 = objectList.get(i);</div><div class="line">            if (t1 == null) continue;</div><div class="line">            Class oClass = t1.getClass();</div><div class="line">            Field[] fields = oClass.getDeclaredFields();</div><div class="line">            if (fields == null || fields.length == 0) continue;</div><div class="line">            String key;</div><div class="line">            String valueStr;</div><div class="line">            if (isFirstRow) &#123;</div><div class="line">                //创建标题</div><div class="line">                HSSFRow row = sheet.createRow(0);</div><div class="line">                for (int j = 0, k = 0; j &lt; fields.length; j++) &#123;</div><div class="line">                    Field field = fields[j];</div><div class="line">                    if (field == null) continue;</div><div class="line">                    HSSFCell cell = row.createCell(k);</div><div class="line">                    key = field.getName();</div><div class="line">                    if (StringUtils.isBlank(key)) continue;</div><div class="line">                    if (&quot;serialVersionUID&quot;.equalsIgnoreCase(key)) continue;</div><div class="line">                    cell.setCellStyle(style);</div><div class="line">                    cell.setCellValue(key);</div><div class="line">                    keyMap.put(key, k);</div><div class="line">                    k++;</div><div class="line">                &#125;</div><div class="line">                isFirstRow = false;</div><div class="line">            &#125;</div><div class="line">            //添加数据</div><div class="line">            HSSFRow row = sheet.createRow(i + 1);</div><div class="line">            for (int j = 0; j &lt; fields.length; j++) &#123;</div><div class="line">                Field field = fields[j];</div><div class="line">                if (field == null) continue;</div><div class="line">                try &#123;</div><div class="line">                    key = field.getName();</div><div class="line">                    HSSFCell cell = row.createCell(keyMap.get(key));</div><div class="line">                    if (StringUtils.isBlank(key)) continue;</div><div class="line">                    if (&quot;serialVersionUID&quot;.equalsIgnoreCase(key)) continue;</div><div class="line">                    field.setAccessible(true);</div><div class="line">                    Object value = field.get(t1);</div><div class="line">                    if (value == null) continue;</div><div class="line">                    //日期格式化</div><div class="line">                    if (value instanceof Calendar) &#123;</div><div class="line">                        SimpleDateFormat dateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd hh:mm:ss&quot;);</div><div class="line">                        valueStr = dateFormat.format(((Calendar) value).getTime());</div><div class="line">                    &#125; else if (value instanceof Date) &#123;</div><div class="line">                        SimpleDateFormat dateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd hh:mm:ss&quot;);</div><div class="line">                        valueStr = dateFormat.format(value);</div><div class="line">                    &#125; else &#123;</div><div class="line">                        //其他转换为JSON字符串,去掉引号</div><div class="line">                        valueStr = JSON.toJSONString(value).replaceAll(&quot;\&quot;&quot;, &quot;&quot;);</div><div class="line">                    &#125;</div><div class="line">                    cell.setCellValue(valueStr);</div><div class="line">                &#125; catch (IllegalAccessException e) &#123;</div><div class="line">                    //异常继续执行下一个成员变量</div><div class="line">                    continue;</div><div class="line">                &#125; catch (Exception e) &#123;</div><div class="line">                    //异常继续执行下一个成员变量</div><div class="line">                    continue;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        //列宽自适应</div><div class="line">        for (int i = 0; i &lt; keyMap.size(); i++) &#123;</div><div class="line">            sheet.autoSizeColumn(i);</div><div class="line">            sheet.setColumnWidth(i, sheet.getColumnWidth(i) * 17 / 10);</div><div class="line">        &#125;</div><div class="line">        return workbook;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        List&lt;Student&gt; studentList = new ArrayList&lt;Student&gt;();</div><div class="line">        List&lt;String&gt; stringList = new ArrayList&lt;String&gt;();</div><div class="line">        stringList.add(&quot;qqqq&quot;);</div><div class="line">        stringList.add(&quot;wwww&quot;);</div><div class="line">        stringList.add(&quot;eeee&quot;);</div><div class="line"></div><div class="line">        Student student1 = new Student();</div><div class="line">        student1.set学生姓名(&quot;张三&quot;);</div><div class="line">        student1.set学生成绩(new BigDecimal(&quot;90&quot;));</div><div class="line">        student1.setStringList(stringList);</div><div class="line">        studentList.add(student1);</div><div class="line"></div><div class="line">        Student student2 = new Student();</div><div class="line">        student2.set学生姓名(&quot;李四&quot;);</div><div class="line">        student2.set学生成绩(new BigDecimal(&quot;80&quot;));</div><div class="line">        studentList.add(student2);</div><div class="line"></div><div class="line">        Student student3 = new Student();</div><div class="line">        student3.set学生姓名(&quot;王五&quot;);</div><div class="line">        student3.set学生成绩(new BigDecimal(&quot;50&quot;));</div><div class="line">        studentList.add(student3);</div><div class="line"></div><div class="line">        Student student4 = new Student();</div><div class="line">        student4.set学生姓名(&quot;陈翔&quot;);</div><div class="line">        student4.set学生成绩(new BigDecimal(&quot;0.0&quot;));</div><div class="line">        studentList.add(student4);</div><div class="line"></div><div class="line">        HSSFWorkbook workbook = new HSSFWorkbook();</div><div class="line">        try &#123;</div><div class="line">            workbook = AccessUtils.ListObject2HSSFWorkbook(studentList);</div><div class="line">            FileOutputStream outputStream = new FileOutputStream(&quot;E:\\downloads\\test.xls&quot;);</div><div class="line">            workbook.write(outputStream);</div><div class="line">        &#125; catch (TransactionRequiredException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; catch (FileNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; catch (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2.测试用到的对象<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line">package my.test.org;</div><div class="line"></div><div class="line">import java.io.Serializable;</div><div class="line">import java.math.BigDecimal;</div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Author: xinyi.pan</div><div class="line"> * Date: 2017/3/1</div><div class="line"> */</div><div class="line">public class Student implements Serializable &#123;</div><div class="line"></div><div class="line">    private static final long serialVersionUID = 7911823052873591951L;</div><div class="line">    private String 学生姓名 ;</div><div class="line">    private BigDecimal 学生成绩 ;</div><div class="line">    private List&lt;String&gt; stringList ;</div><div class="line"></div><div class="line"></div><div class="line">    public String get学生姓名() &#123;</div><div class="line">        return 学生姓名;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void set学生姓名(String 学生姓名) &#123;</div><div class="line">        this.学生姓名 = 学生姓名;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public BigDecimal get学生成绩() &#123;</div><div class="line">        return 学生成绩;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void set学生成绩(BigDecimal 学生成绩) &#123;</div><div class="line">        this.学生成绩 = 学生成绩;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public List&lt;String&gt; getStringList() &#123;</div><div class="line">        return stringList;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setStringList(List&lt;String&gt; stringList) &#123;</div><div class="line">        this.stringList = stringList;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">package my.test.org;</div><div class="line"></div><div class="line">import java.io.Serializable;</div><div class="line">import java.math.BigDecimal;</div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Author: xinyi.pan</div><div class="line"> * Date: 2017/3/1</div><div class="line"> */</div><div class="line">public class Student implements Serializable &#123;</div><div class="line"></div><div class="line">    private static final long serialVersionUID = 7911823052873591951L;</div><div class="line">    private String 学生姓名 ;</div><div class="line">    private BigDecimal 学生成绩 ;</div><div class="line">    private List&lt;String&gt; stringList ;</div><div class="line"></div><div class="line"></div><div class="line">    public String get学生姓名() &#123;</div><div class="line">        return 学生姓名;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void set学生姓名(String 学生姓名) &#123;</div><div class="line">        this.学生姓名 = 学生姓名;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public BigDecimal get学生成绩() &#123;</div><div class="line">        return 学生成绩;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void set学生成绩(BigDecimal 学生成绩) &#123;</div><div class="line">        this.学生成绩 = 学生成绩;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public List&lt;String&gt; getStringList() &#123;</div><div class="line">        return stringList;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setStringList(List&lt;String&gt; stringList) &#123;</div><div class="line">        this.stringList = stringList;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="输出的结果"><a href="#输出的结果" class="headerlink" title="输出的结果"></a>输出的结果</h3><table><br>    <thead><br>        <th><br>            </th></thead><td>学生姓名</td><br>            <td>学生成绩</td><br>            <td>stringList</td><br>        <br>    <br>    <tbody><br>        <tr><br>            <td>张三</td><br>            <td>90</td><br>            <td>[qqqq,wwww,eeee]</td><br>        </tr><br>        <tr><br>            <td>李四</td><br>            <td>80</td><br>            <td></td><br>        </tr><br>        <tr><br>            <td>王五</td><br>            <td>50</td><br>            <td></td><br>        </tr><br>        <tr><br>            <td>陈翔</td><br>            <td>0.0</td><br>            <td></td><br>        </tr><br>    </tbody><br></table>

<hr>
<h2 id="End"><a href="#End" class="headerlink" title="End"></a><center>End</center></h2>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;所用到的依赖jar包&quot;&gt;&lt;a href=&quot;#所用到的依赖jar包&quot; class=&quot;headerlink&quot; title=&quot;所用到的依赖jar包.&quot;&gt;&lt;/a&gt;所用到的依赖jar包.&lt;/h3&gt;&lt;p&gt;1.阿帕奇的POI&lt;br&gt;2.阿里的fastjson&lt;br&gt;3.阿帕奇公
    
    </summary>
    
      <category term="工具类" scheme="https://lmxy1990.github.io/categories/%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>ubuntu 主题推荐</title>
    <link href="https://lmxy1990.github.io/2017/02/20/ubuntu-%E4%B8%BB%E9%A2%98%E6%8E%A8%E8%8D%90/"/>
    <id>https://lmxy1990.github.io/2017/02/20/ubuntu-主题推荐/</id>
    <published>2017-02-20T03:23:38.000Z</published>
    <updated>2017-02-20T08:11:00.462Z</updated>
    
    <content type="html"><![CDATA[<h3 id="更换源"><a href="#更换源" class="headerlink" title="更换源"></a>更换源</h3><p>打开系统设置 &gt; 软件和更新 选择中国服务器(官方用的是阿里云)</p>
<h3 id="设置新建窗口居中"><a href="#设置新建窗口居中" class="headerlink" title="设置新建窗口居中"></a>设置新建窗口居中</h3><p>打开终端:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt install compizconfig-settings-manager</div></pre></td></tr></table></figure></p>
<p>然后打开compizconfig-settings-manager来配置.<br>在窗口管理 &gt; 放置窗口 &gt; 安置模式 &gt; 居中</p>
<h3 id="安装主题工具-unity-tweak-tool"><a href="#安装主题工具-unity-tweak-tool" class="headerlink" title="安装主题工具 unity-tweak-tool"></a>安装主题工具 unity-tweak-tool</h3><p>打开终端:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo  apt-get  install unity-tweak-tool</div></pre></td></tr></table></figure></p>
<h3 id="添加主题"><a href="#添加主题" class="headerlink" title="添加主题"></a>添加主题</h3><p>1.Arc 主题安装<br>打开终端:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo sh -c &quot;echo &apos;deb http://download.opensuse.org/repositories/home:/Horst3180/xUbuntu_16.04/ /&apos; &gt;&gt; /etc/apt/sources.list.d/arc-theme.list&quot;</div></pre></td></tr></table></figure></p>
<p>让 Arc GTK 主题源定期收到主题更新:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">wget http://download.opensuse.org/repositories/home:Horst3180/xUbuntu_16.04/Release.key</div><div class="line"></div><div class="line">sudo apt-key add - &lt; Release.key</div></pre></td></tr></table></figure></p>
<p>安装arc主题:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt update</div><div class="line">sudo apt install arc-theme</div></pre></td></tr></table></figure></p>
<h3 id="换掉ubuntu启动器的图标"><a href="#换掉ubuntu启动器的图标" class="headerlink" title="换掉ubuntu启动器的图标"></a>换掉ubuntu启动器的图标</h3><p>将面板上的 ‘Ubuntu Desktop’ 文字替换 ‘Mac’<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd &amp;&amp; wget -O Mac.po http://drive.noobslab.com/data/Mac/change-name-on-panel/mac.po</div><div class="line"></div><div class="line">cd /usr/share/locale/en/LC_MESSAGES; sudo msgfmt -o unity.mo ~/Mac.po;rm ~/Mac.po;cd</div></pre></td></tr></table></figure></p>
<p>语言上如果是其他非英语语言，将 /en 做相应修改：</p>
<p>恢复原来的桌面文字命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd &amp;&amp; wget -O Ubuntu.po http://drive.noobslab.com/data/Mac/change-name-on-panel/ubuntu.po</div><div class="line"></div><div class="line">cd /usr/share/locale/en/LC_MESSAGES; sudo msgfmt -o unity.mo ~/Ubuntu.po;rm ~/Ubuntu.po;cd</div></pre></td></tr></table></figure></p>
<p>启动器上苹果Logo<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">wget -O launcher_bfb.png http://drive.noobslab.com/data/Mac/launcher-logo/apple/launcher_bfb.png</div><div class="line"></div><div class="line">sudo mv launcher_bfb.png /usr/share/unity/icons/</div></pre></td></tr></table></figure></p>
<p>恢复图标：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">wget -O launcher_bfb.png http://drive.noobslab.com/data/Mac/launcher-logo/ubuntu/launcher_bfb.png</div><div class="line"></div><div class="line">sudo mv launcher_bfb.png /usr/share/unity/icons/</div></pre></td></tr></table></figure></p>
<h3 id="设置主题"><a href="#设置主题" class="headerlink" title="设置主题"></a>设置主题</h3><p>打开 Unity Tweak Tool 工具软件.<br>找到主题 设置自己喜欢的主题即可.</p>
<hr>
<h2 id="End"><a href="#End" class="headerlink" title="End"></a><center>End</center></h2>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;更换源&quot;&gt;&lt;a href=&quot;#更换源&quot; class=&quot;headerlink&quot; title=&quot;更换源&quot;&gt;&lt;/a&gt;更换源&lt;/h3&gt;&lt;p&gt;打开系统设置 &amp;gt; 软件和更新 选择中国服务器(官方用的是阿里云)&lt;/p&gt;
&lt;h3 id=&quot;设置新建窗口居中&quot;&gt;&lt;a href=
    
    </summary>
    
      <category term="Linux" scheme="https://lmxy1990.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>ubuntu 清除Guest账户</title>
    <link href="https://lmxy1990.github.io/2017/02/17/ubuntu-%E6%B8%85%E9%99%A4Guest%E8%B4%A6%E6%88%B7/"/>
    <id>https://lmxy1990.github.io/2017/02/17/ubuntu-清除Guest账户/</id>
    <published>2017-02-17T09:58:24.000Z</published>
    <updated>2017-02-17T10:00:26.982Z</updated>
    
    <content type="html"><![CDATA[<p>删除:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo mkdir /etc/lightdm/lightdm.conf.d</div><div class="line"></div><div class="line">sudo sh -c &apos;printf &quot;[SeatDefaults]\nallow-guest=false\n&quot; &gt; /etc/lightdm/lightdm.conf.d/50-no-guest.conf&apos;</div></pre></td></tr></table></figure></p>
<p>恢复:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo rm /etc/lightdm/lightdm.conf.d/50-no-guest.conf</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="End"><a href="#End" class="headerlink" title="End"></a><center>End</center></h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;删除:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;l
    
    </summary>
    
      <category term="linux" scheme="https://lmxy1990.github.io/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>浅谈关系数据使用非关系型数据库处理方法</title>
    <link href="https://lmxy1990.github.io/2017/01/26/%E6%B5%85%E8%B0%88%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E4%BD%BF%E7%94%A8%E9%9D%9E%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95/"/>
    <id>https://lmxy1990.github.io/2017/01/26/浅谈关系数据使用非关系型数据库处理方法/</id>
    <published>2017-01-26T01:25:38.000Z</published>
    <updated>2017-02-06T03:24:51.431Z</updated>
    
    <content type="html"><![CDATA[<p>场景:多个数据表关联.需要查询多个表的信息.<br>表1:用户名+性别<br>表2:表1的id,密码<br>表3:用户id+用户车辆信息</p>
<p>查询条件:需要查询某个用户的大众车辆,并查询该用户的密码.假色有很多台.采用分页查询.那么这里应该区分主表,附加表.我们需要的数据,必须是筛选过的数据才能准确分页.所以,最后的信息一定是主表,也就是表1.</p>
<p>可以采用先查询所有用户中,车辆为大众的用户id.然后,根据用户名,用户id去筛选出用户信息.再根据用户表的id.去查询用户密码.</p>
<p>为什么要如此做?<br>1.筛选条件前置,才能去除分页之后再筛选造成的数据错误.<br>2.查询速度其实是一样的,因为都需要去查询两个表.<br>3.相对于没有筛选的条件的信息获取,先查寻出id,再根据id拉取数据,一般这个id都会做索引.所以,如此的话,速度应该也能满足.</p>
<hr>
<h2 id="End"><a href="#End" class="headerlink" title="End"></a><center>End</center></h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;场景:多个数据表关联.需要查询多个表的信息.&lt;br&gt;表1:用户名+性别&lt;br&gt;表2:表1的id,密码&lt;br&gt;表3:用户id+用户车辆信息&lt;/p&gt;
&lt;p&gt;查询条件:需要查询某个用户的大众车辆,并查询该用户的密码.假色有很多台.采用分页查询.那么这里应该区分主表,附加表.我们需
    
    </summary>
    
      <category term="工作日志" scheme="https://lmxy1990.github.io/categories/%E5%B7%A5%E4%BD%9C%E6%97%A5%E5%BF%97/"/>
    
    
  </entry>
  
  <entry>
    <title>wondiws磁盘管理命令的使用</title>
    <link href="https://lmxy1990.github.io/2017/01/25/wondiws%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://lmxy1990.github.io/2017/01/25/wondiws磁盘管理命令的使用/</id>
    <published>2017-01-25T08:15:27.000Z</published>
    <updated>2017-01-25T08:34:38.542Z</updated>
    
    <content type="html"><![CDATA[<h3 id="diskpart命令"><a href="#diskpart命令" class="headerlink" title="diskpart命令"></a>diskpart命令</h3><p><strong> 使用方式,打开cmd.输入diskpart.进入diskpart模式.切记,不要相信网上的坑逼教程.直接select disk 1来clean.这样你可能删掉的不是自己想要的磁盘.资料丢失.切记切记,教程参考.实际使用需理论考虑.坑逼教程在百度经验.别相信百度,选择谷歌! </strong></p>
<h4 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h4><p>1.查看磁盘<br><code>list disk</code><br>2.查看分区<br><code>list partition</code><br>3.查看卷<br><code>list volume</code><br>4.查看虚拟磁盘<br><code>list vdisk</code></p>
<h4 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h4><p>1.选择磁盘<br><code>select disk 序号</code><br>2.选择分区<br><code>select partition 序号</code><br>3.选择卷<br><code>select volume 序号</code><br>4.选择虚拟磁盘<br><code>select vdisk 序号</code></p>
<h4 id="清除"><a href="#清除" class="headerlink" title="清除"></a>清除</h4><p>1.清除磁盘<br><code>clean disk</code><br>2.清除分区<br><code>delete partition</code><br>3.清除盘符(卷)<br><code>delete volume</code></p>
<h4 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h4><p>1.创建主分区<br><code>create partition primary [size=n] [offset=n]</code><br>2.创建逻辑分区<br><code>create partition logical [size=n] [offset=n]</code><br>3.创建扩展分区<br><code>create partition extended [size=n] [offset=n]</code><br>4.分配盘符<br><code>assign [letter=l]</code></p>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>1.快速格式化<br><code>format [fs=ntfs] quick</code></p>
<p><em>操作的步骤是,先查询.然后选择.在执行清除.然后在分配.</em></p>
<hr>
<h2 id="End"><a href="#End" class="headerlink" title="End"></a><center>End</center></h2>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;diskpart命令&quot;&gt;&lt;a href=&quot;#diskpart命令&quot; class=&quot;headerlink&quot; title=&quot;diskpart命令&quot;&gt;&lt;/a&gt;diskpart命令&lt;/h3&gt;&lt;p&gt;&lt;strong&gt; 使用方式,打开cmd.输入diskpart.进入diskp
    
    </summary>
    
      <category term="小技巧" scheme="https://lmxy1990.github.io/categories/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
    
  </entry>
  
  <entry>
    <title>Druid的坑</title>
    <link href="https://lmxy1990.github.io/2017/01/25/Druid%E7%9A%84%E5%9D%91/"/>
    <id>https://lmxy1990.github.io/2017/01/25/Druid的坑/</id>
    <published>2017-01-25T01:15:27.000Z</published>
    <updated>2017-01-25T01:24:48.632Z</updated>
    
    <content type="html"><![CDATA[<p>1.高性能的Druid连接池,在没有引入驱动的时候.调用连接.线程直接死循环.</p>
<hr>
<h2 id="End"><a href="#End" class="headerlink" title="End"></a><center>End</center></h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.高性能的Druid连接池,在没有引入驱动的时候.调用连接.线程直接死循环.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;End&quot;&gt;&lt;a href=&quot;#End&quot; class=&quot;headerlink&quot; title=&quot;End&quot;&gt;&lt;/a&gt;&lt;center&gt;End&lt;/center&gt;&lt;/h2&gt;
    
    </summary>
    
      <category term="工作日志" scheme="https://lmxy1990.github.io/categories/%E5%B7%A5%E4%BD%9C%E6%97%A5%E5%BF%97/"/>
    
    
  </entry>
  
  <entry>
    <title>mysql日期处理函数</title>
    <link href="https://lmxy1990.github.io/2017/01/23/mysql%E6%97%A5%E6%9C%9F%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0/"/>
    <id>https://lmxy1990.github.io/2017/01/23/mysql日期处理函数/</id>
    <published>2017-01-23T08:45:58.000Z</published>
    <updated>2017-01-24T01:39:32.871Z</updated>
    
    <content type="html"><![CDATA[<h3 id="过滤指定日期"><a href="#过滤指定日期" class="headerlink" title="过滤指定日期"></a>过滤指定日期</h3><hr>
<p>1.近1天<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">select * from table where to_days(column_time) = to_days(now());</div><div class="line"></div><div class="line">select * from table where date(column_time) = curdate();</div></pre></td></tr></table></figure></p>
<p>2.近7天<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select * from table where DATE_SUB(CURDATE(), INTERVAL 7 DAY) &lt;= date(column_time);</div></pre></td></tr></table></figure></p>
<p>3.近一个月<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select * from table where DATE_SUB(CURDATE(), INTERVAL 1 MONTH) &lt;= date(column_time);</div></pre></td></tr></table></figure></p>
<h3 id="筛选出需要的日期的值"><a href="#筛选出需要的日期的值" class="headerlink" title="筛选出需要的日期的值"></a>筛选出需要的日期的值</h3><p>1.筛选出年月日<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select DATA(column_time) from table ;</div></pre></td></tr></table></figure></p>
<p>2.筛选出年月<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select Extract(year_month FROM column_time) from table ;</div></pre></td></tr></table></figure></p>
<p>3.筛选出年.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select Extract(year FROM column_time) from table ;</div></pre></td></tr></table></figure></p>
<p>4.筛选出月<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select Extract(month FROM column_time) from table ;</div></pre></td></tr></table></figure></p>
<p>5.筛选出日<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select Extract(day FROM column_time) from table ;</div></pre></td></tr></table></figure></p>
<p>6.筛选出时分秒<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select time(day FROM column_time) from table ;</div></pre></td></tr></table></figure></p>
<h3 id="比较日期"><a href="#比较日期" class="headerlink" title="比较日期"></a>比较日期</h3><p>1.间隔天数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT match_date,create_time FROM table_name WHERE  datediff(match_date,create_time) = 60</div></pre></td></tr></table></figure></p>
<p><em>详见:</em> <a href="https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html#function_datediff" target="_blank" rel="external">官方文档</a></p>
<hr>
<h2 id="End"><a href="#End" class="headerlink" title="End"></a><center>End</center></h2>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;过滤指定日期&quot;&gt;&lt;a href=&quot;#过滤指定日期&quot; class=&quot;headerlink&quot; title=&quot;过滤指定日期&quot;&gt;&lt;/a&gt;过滤指定日期&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;1.近1天&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;
    
    </summary>
    
      <category term="sql" scheme="https://lmxy1990.github.io/categories/sql/"/>
    
    
  </entry>
  
  <entry>
    <title>xshell故障</title>
    <link href="https://lmxy1990.github.io/2017/01/23/xshell%E6%95%85%E9%9A%9C/"/>
    <id>https://lmxy1990.github.io/2017/01/23/xshell故障/</id>
    <published>2017-01-23T02:05:02.000Z</published>
    <updated>2017-01-23T02:09:01.654Z</updated>
    
    <content type="html"><![CDATA[<h3 id="故障1-登录成功-会话断开"><a href="#故障1-登录成功-会话断开" class="headerlink" title="故障1,登录成功.会话断开."></a>故障1,登录成功.会话断开.</h3><ul>
<li>这种原因google了很久,都没找到.后来才知道是因为窗口太大了.服务器那边可能不支持大屏显示吧.缩小窗口就可以了.</li>
</ul>
<hr>
<h2 id="End"><a href="#End" class="headerlink" title="End"></a><center>End</center></h2>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;故障1-登录成功-会话断开&quot;&gt;&lt;a href=&quot;#故障1-登录成功-会话断开&quot; class=&quot;headerlink&quot; title=&quot;故障1,登录成功.会话断开.&quot;&gt;&lt;/a&gt;故障1,登录成功.会话断开.&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;这种原因google了很久,都没找到
    
    </summary>
    
      <category term="工作日志" scheme="https://lmxy1990.github.io/categories/%E5%B7%A5%E4%BD%9C%E6%97%A5%E5%BF%97/"/>
    
    
  </entry>
  
  <entry>
    <title>java内存模型</title>
    <link href="https://lmxy1990.github.io/2017/01/22/java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
    <id>https://lmxy1990.github.io/2017/01/22/java内存模型/</id>
    <published>2017-01-22T01:26:06.000Z</published>
    <updated>2017-01-22T02:11:03.590Z</updated>
    
    <content type="html"><![CDATA[<h3 id="运行时的内存模型"><a href="#运行时的内存模型" class="headerlink" title="运行时的内存模型"></a>运行时的内存模型</h3><hr>
<ul>
<li>java目前使用的虚拟机是HotSpot.运行时的内存模型可以简单分为:方法栈,堆,程序计数器,虚拟机栈,本地方法栈.其中堆与方法栈是所有线程共享的.虚拟机栈与本地方法栈,程序计数器是县城独享的.程序计数器,虚拟机栈的生命周期与线程的周期是一样的.</li>
</ul>
<h4 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h4><ul>
<li>程序计数器可以见到那看作是当前线程的运行状态.进行指令分配的一小段内存块.它的功能是记录当前线程的一些状态,值.以便于线程的唤醒,启动.异常处理等线程功能都由它来完成.</li>
</ul>
<h4 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h4><ul>
<li>虚拟机栈中保存的是局部变量,操作数栈,程序的出口信息.动态连接等.它的主要作用是存储线程执行的一些数据(线程内部数据).</li>
</ul>
<h4 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h4><ul>
<li>本地方法栈也是用来保存方法内的变量(局部变量),动态连接,出口数据等线程私有的数据.只是它对应的是本地方法(本地函数?),而虚拟机栈对应的是java的方法.</li>
</ul>
<h4 id="方法栈"><a href="#方法栈" class="headerlink" title="方法栈"></a>方法栈</h4><ul>
<li>方法栈是线程公有的.它主要保存所有类的信息,常量,静态变量.方法模型的基本信息.非静态成员变量也保存在此.所以成员变量需要考虑线程安全性的问题.</li>
</ul>
<h4 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h4><ul>
<li>java堆是内存中最大的一部分,几乎所有的对象实例都保存于此.GC回收最主要部分也是这里.</li>
</ul>
<hr>
<h2 id="End"><a href="#End" class="headerlink" title="End"></a><center>End</center></h2>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;运行时的内存模型&quot;&gt;&lt;a href=&quot;#运行时的内存模型&quot; class=&quot;headerlink&quot; title=&quot;运行时的内存模型&quot;&gt;&lt;/a&gt;运行时的内存模型&lt;/h3&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;java目前使用的虚拟机是HotSpot.运行时的内存模型可以简单分为
    
    </summary>
    
      <category term="jvm" scheme="https://lmxy1990.github.io/categories/jvm/"/>
    
    
  </entry>
  
  <entry>
    <title>windows下删除文件过深命令</title>
    <link href="https://lmxy1990.github.io/2017/01/19/windows%E4%B8%8B%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6%E8%BF%87%E6%B7%B1%E5%91%BD%E4%BB%A4/"/>
    <id>https://lmxy1990.github.io/2017/01/19/windows下删除文件过深命令/</id>
    <published>2017-01-19T01:35:18.000Z</published>
    <updated>2017-01-19T01:40:24.004Z</updated>
    
    <content type="html"><![CDATA[<p>命令: robocopy windows的可靠文件复制.<br>原理: 新建一个文件夹,然后使用可靠复制命令.将新建的正常文件夹覆盖需要删除的文件夹.<br>示例: robocopy /MIR 正常文件夹 需要删除的文件夹.</p>
<p>查看命令所有参数:robocopy /?</p>
<hr>
<h2 id="End"><a href="#End" class="headerlink" title="End"></a><center>End</center></h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;命令: robocopy windows的可靠文件复制.&lt;br&gt;原理: 新建一个文件夹,然后使用可靠复制命令.将新建的正常文件夹覆盖需要删除的文件夹.&lt;br&gt;示例: robocopy /MIR 正常文件夹 需要删除的文件夹.&lt;/p&gt;
&lt;p&gt;查看命令所有参数:robocopy
    
    </summary>
    
      <category term="小技巧" scheme="https://lmxy1990.github.io/categories/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
    
  </entry>
  
  <entry>
    <title>java多线程概念</title>
    <link href="https://lmxy1990.github.io/2017/01/16/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A6%82%E5%BF%B5/"/>
    <id>https://lmxy1990.github.io/2017/01/16/java多线程概念/</id>
    <published>2017-01-16T03:14:32.000Z</published>
    <updated>2017-01-16T03:25:22.222Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ul>
<li>多线程是线程切换,多线程中的线程安全指的是在统一资源中.多线程在读取与修改的时候.资源是否同步.对于属于线程的资源,则无需考虑多线程安全问题.因为该资源是该县城独占.不存在线程安全问题.</li>
</ul>
<h3 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h3><ul>
<li>并发与多线程是一个意思.并发描述侧重于业务.多线程描述侧重于编码机制.</li>
</ul>
<hr>
<h2 id="End"><a href="#End" class="headerlink" title="End"></a><center>End</center></h2>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;多线程是线程切换,多线程中的线程安全指的是在统一资源中.多线程在读取与修改的时候.资源是否同步.对于属于线程的资源,则无需考虑多
    
    </summary>
    
      <category term="笔记" scheme="https://lmxy1990.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>list,map,queue,dequeue区别</title>
    <link href="https://lmxy1990.github.io/2017/01/16/list-map-queue-dequeue%E5%8C%BA%E5%88%AB/"/>
    <id>https://lmxy1990.github.io/2017/01/16/list-map-queue-dequeue区别/</id>
    <published>2017-01-16T02:21:18.000Z</published>
    <updated>2017-01-16T03:09:43.707Z</updated>
    
    <content type="html"><![CDATA[<h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><ul>
<li>list是最常用的集合类.这里需要注意的是arraylist是非线程同步的.如果资源共享时候,需要考虑同步的话可以使用vector类.也可以使用同步队列.arraylist是一局数组的动态扩充来实现的.如果超过长度,则会一次性扩充当前长度的1.5倍.</li>
</ul>
<h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><ul>
<li>map也是集合中最为常用的集合类.hashMap,tableMap的区别是多线程时候,该资源是否同步.hashmap的底层实现是根据hashcode与next来进行判断.对于不同对象的相同hashcode,hashmap会在该节点产生一个链表.hashmap的put依托于重写equals方法.hashmap中的hashcode也是重新生成的.null可以作为key. hashcode的无符号右位移16位的次方(<code>(h = key.hashCode()) ^ (h &gt;&gt;&gt; 16)</code>).hashmap的的对象是Entry类型.所以equals时候,需比较hashcode与key对象的equals.来判断是否相等.然后执行是插入还哦是更新</li>
</ul>
<h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><ul>
<li>队列比较特殊,它是集合类.但是它比一般的集合类功能要多一点.对于非阻塞无界队列来说,它功能上与list来说是一样的.队列有一个特性是阻塞,它表示的意义是只容许插入指定的数据,如果是插满,则在put方法时候会一直处于等待插入状态,add方法会抛出异常.offer方法则会插入失败,但不会抛出异常.功能上来说,队列优于list,set.</li>
</ul>
<hr>
<h2 id="End"><a href="#End" class="headerlink" title="End"></a><center>End</center></h2>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;list&quot;&gt;&lt;a href=&quot;#list&quot; class=&quot;headerlink&quot; title=&quot;list&quot;&gt;&lt;/a&gt;list&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;list是最常用的集合类.这里需要注意的是arraylist是非线程同步的.如果资源共享时候,需要考虑同步的话可
    
    </summary>
    
      <category term="笔记" scheme="https://lmxy1990.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>项目命令规范</title>
    <link href="https://lmxy1990.github.io/2017/01/16/%E9%A1%B9%E7%9B%AE%E5%91%BD%E4%BB%A4%E8%A7%84%E8%8C%83/"/>
    <id>https://lmxy1990.github.io/2017/01/16/项目命令规范/</id>
    <published>2017-01-16T01:44:10.000Z</published>
    <updated>2017-01-16T01:48:14.903Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Alpha："><a href="#Alpha：" class="headerlink" title="Alpha："></a>Alpha：</h4><ul>
<li>Alpha是内部测试版,一般不向外部发布,会有很多Bug.除非你也是测试人员,否则不建议使用.是希腊字母的第一位,表示最初级的版本，alpha 就是α，beta 就是β ，alpha 版就是比<br>beta还早的测试版，一般都是内部测试的版本。<h4 id="Beta"><a href="#Beta" class="headerlink" title="Beta:"></a>Beta:</h4></li>
<li>该版本相对于α版已有了很大的改进，消除了严重的错误，但还是存在着一缺陷，需要经过多次测试来进一步消除。这个阶段的版本会一直加入新的功能。        <h4 id="RC：-Release-Candidate"><a href="#RC：-Release-Candidate" class="headerlink" title="RC：(Release Candidate)"></a>RC：(Release Candidate)</h4></li>
<li>Candidate是候选人的意思，用在软件上就是候选版本。Release.Candidate.就是发行候选版本。和Beta版最大的差别在于Beta阶段会一直加入新的功能，但是到了RC版本，几乎<br>就不会加入新的功能了，而主要着重于除错!  RC版本是最终发放给用户的最接近正式版的版本，发行后改正bug就是正式版了，就是正式版之前的最后一个测试版。<h4 id="GA：（general-availability）"><a href="#GA：（general-availability）" class="headerlink" title="GA：（general availability）"></a>GA：（general availability）</h4></li>
<li>比如：Apache Struts 2 GA这是Apache Struts 2首次发行稳定的版本，GA意味着GeneralAvailability，也就是官方开始推荐广泛使用了。<h4 id="Release"><a href="#Release" class="headerlink" title="Release:"></a>Release:</h4></li>
<li>该版本意味“最终版本”，在前面版本的一系列测试版之后，终归会有一个正式版本，是最终交付用户使用的一个版本。该版本有时也称为标准版。一般情况下，Release不会以单词形式出现在软件封面上，取而代之的是符号(R)。<h4 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h4></li>
<li>第一位表示主版本,一般是产品重大迭代.第二位表示小版本.一般表示小功能的增加.第三位表示修复版本.如果是4位数字的,那么最后一位代表bug修复/优化版本.</li>
</ul>
<hr>
<h2 id="End"><a href="#End" class="headerlink" title="End"></a><center>End</center></h2>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Alpha：&quot;&gt;&lt;a href=&quot;#Alpha：&quot; class=&quot;headerlink&quot; title=&quot;Alpha：&quot;&gt;&lt;/a&gt;Alpha：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Alpha是内部测试版,一般不向外部发布,会有很多Bug.除非你也是测试人员,否则不建议使用.是
    
    </summary>
    
      <category term="常识" scheme="https://lmxy1990.github.io/categories/%E5%B8%B8%E8%AF%86/"/>
    
    
  </entry>
  
  <entry>
    <title>java编程的一些建议</title>
    <link href="https://lmxy1990.github.io/2017/01/16/java%E7%BC%96%E7%A8%8B%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BB%BA%E8%AE%AE/"/>
    <id>https://lmxy1990.github.io/2017/01/16/java编程的一些建议/</id>
    <published>2017-01-16T01:19:14.000Z</published>
    <updated>2017-01-16T01:43:38.355Z</updated>
    
    <content type="html"><![CDATA[<h2 id="集合类"><a href="#集合类" class="headerlink" title="集合类"></a>集合类</h2><ul>
<li>list方法的subList是返回视图上的子类.使用该方法之后,不能对其父类再进行一些操作.否则会有size的异常.subList还是不要使用的好,因为它没有产生新的对象.</li>
<li>排序的打乱是用自带的shuffle方法.</li>
<li>多线程对统一资源的操作时,使用vector或者hashtable.也可以使用同步队列.</li>
<li>集合对象可以采用谷歌的Guava包.</li>
</ul>
<hr>
<h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a><center>未完待续</center></h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;集合类&quot;&gt;&lt;a href=&quot;#集合类&quot; class=&quot;headerlink&quot; title=&quot;集合类&quot;&gt;&lt;/a&gt;集合类&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;list方法的subList是返回视图上的子类.使用该方法之后,不能对其父类再进行一些操作.否则会有size的异常.su
    
    </summary>
    
      <category term="笔记" scheme="https://lmxy1990.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>altimu-designer常用快捷键</title>
    <link href="https://lmxy1990.github.io/2017/01/11/altimu-designer%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>https://lmxy1990.github.io/2017/01/11/altimu-designer常用快捷键/</id>
    <published>2017-01-11T04:34:35.000Z</published>
    <updated>2017-01-11T06:24:21.322Z</updated>
    
    <content type="html"><![CDATA[<h3 id="原理图快捷键列表"><a href="#原理图快捷键列表" class="headerlink" title="原理图快捷键列表"></a>原理图快捷键列表</h3><ol>
<li>p 放置器件</li>
<li>tab 在放置之前,设置器件的属性设置</li>
<li>space 器件90度旋转.</li>
<li>x 器件X轴镜像</li>
<li>y 器件Y轴镜像</li>
<li>鼠标左键 放置器件</li>
<li>鼠标右键 取消放置</li>
<li>按住右键, 拖拽图纸</li>
<li>ctrl+滚轮 放大/缩小</li>
<li>ctrl+按住鼠标右键,滑动鼠标 以器件为中心缩放</li>
</ol>
<h3 id="ltium-Designer14-PCB快捷键："><a href="#ltium-Designer14-PCB快捷键：" class="headerlink" title="ltium Designer14 PCB快捷键："></a>ltium Designer14 PCB快捷键：</h3><p><strong>旋转：Space；</strong><br>X轴镜像：X；<br>Y轴镜像：Y；<br>板层管理：L；<br>栅格设置：G；<br>单位进制切换：Q；</p>
<p>对齐-水平：A，D；<br>对齐-垂直：A，I，I，Enter；<br>对齐-顶部：A，T；<br>对齐-底部：A，B；<br>对齐-左侧：A，L；<br>对齐-右侧：A，R；</p>
<p>设计-类设置：D，C;<br>设计-板层管理：D，K；<br>设计-规则：D，R；<br>设计-规则向导：D，W；<br>设计-拷贝ROOM格式：D，M，C；<br>设计-放置ROOM：D，M，R；<br>设计-根据选择对象定义板子形状：D，S，D；<br>设计-编辑网络：D，N，N；</p>
<p>编辑-删除：E，D；<br>编辑-切断轨迹：E，K；<br>编辑-设定原点：E，O，S；<br>编辑-复位原点：E，O，R；</p>
<p>移动-移动：M，M；<br>移动-拖拽：M，D；<br>移动-器件：M，C；<br>移动-打断走线：M，B；<br>移动-器件翻转板层：M，I；</p>
<p>网络-显示网络：N，S，N；<br>网络-显示器件：N，S，O；<br>网络-显示全部：N，S，A；<br>网络-隐藏网络：N，H，N；<br>网络-隐藏器件：N，H，O；<br>网络-隐藏全部：N，H，A；</p>
<p>放置-坐标：P，O；<br>放置-焊盘：P，P；<br>放置-字符：P，S；<br>放置-过孔：P，V；<br>放置-多边形：P，R；<br>放置-填充：P，F；<br>放置-敷铜：P，G；<br>放置-线性尺寸：P，D，L；<br>放置-走线：P，T；<br>放置-差分对布线：P，I；<br>放置-多根布线：P，M，Enter；</p>
<p>选择-全选：S，A；<br>选择-线选：S，L；<br>选择-区域（内部）：S，I；<br>选择-区域（外部）：S，O；</p>
<p>工具-交叉探测对象：T，C；( Ctrl:跳转到目标文件)</p>
<p>工具-泪滴选项：T，E；<br>工具-设计规则检查：T，D；<br>工具-复位错误标志：T，M；<br>工具-从选择元素创建板剪切：T，V，B<br>工具-网络等长调节：T，R；</p>
<p>取消布线-全部：U，A；<br>取消布线-网络：U，N；<br>取消布线-连接：U，C；<br>取消布线-器件：U，O；<br>取消布线-ROOM：U，R；</p>
<p>查看-合适区域：V，A；<br>查看-翻转板子：V，B；<br>查看-适合文件：V，D；<br>查看-合适板子：V，F；<br>查看-合适图纸：V，H；</p>
<p>测距：Ctrl M；</p>
<p>清除蒙板： Shift Ｃ；<br>查找相似对象： Shift F;<br>显示走线长度： Shift G；<br>单层显示： Shift S；<br>改变走线模式：Shift Space；</p>
<p>切换二维显示：2(主键盘)；<br>切换三维显示：3(主键盘)；<br>顶层底层切换：*(小键盘 )；<br>板层切换： /-(小键盘)；<br>智能走线：在放置走线状态， Ctrl；</p>
<p>移动多边形顶点：右键，Y，V；<br>器件联合：右键，U；</p>
<p>增大弧度：长按 &gt;；<br>减小弧度：长按 &lt;；<br>减小多根交互式布线间距：长按Shift B；<br>增加多根交互式布线间距：长按Shift B；</p>
<p><strong>3D模式下：</strong><br>0°旋转：0（主键盘）；<br>90°旋转：9（主键盘）；</p>
<p><strong>布等长线状态下：</strong><br>增加蛇形线拐角弧度：1；<br>减少蛇形线拐角弧度：2；<br>增加蛇形线宽度：3；<br>减少蛇形线宽度：4；<br>增加蛇形线拐角振幅：。；<br>减少蛇形线拐角振幅：，；</p>
<p><strong>Altium Designer14 SCH快捷键：</strong></p>
<p>对齐-水平：A，D；<br>对齐-垂直：A，I；<br>对齐-顶部：A，T；<br>对齐-底部：A，B；<br>对齐-左侧：A，L；<br>对齐-右侧：A，R；</p>
<p>打破线：E，W；</p>
<p>放置总线：P，B；<br>放置总线入库：P，U；<br>放置节点：P，J；<br>放置网络标号：P，N；<br>放置端口：P，R；<br>放置字符串：P，T；<br>放置走线：P，W；<br>放置线：P，D，L；<br>放置差分对标示：P，V，F；<br>放置Blanket：P，V，L；<br>放置网络类：P，V，C；</p>
<p>从原理图选择PCB器件： T，S；<br>封装管理器：T，G；<br>强制标注所有器件：T，N；</p>
<p>查看-合适区域：V，A；<br>查看-适合文件：V，D；<br>查看-合适板子：V，F；</p>
<p>清除蒙板： Shift Ｃ；<br>改变走线模式：Shift Space</p>
<hr>
<h2 id="End"><a href="#End" class="headerlink" title="End"></a><center>End</center></h2>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;原理图快捷键列表&quot;&gt;&lt;a href=&quot;#原理图快捷键列表&quot; class=&quot;headerlink&quot; title=&quot;原理图快捷键列表&quot;&gt;&lt;/a&gt;原理图快捷键列表&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;p 放置器件&lt;/li&gt;
&lt;li&gt;tab 在放置之前,设置器件的属性设置&lt;/li&gt;
    
    </summary>
    
      <category term="微电子" scheme="https://lmxy1990.github.io/categories/%E5%BE%AE%E7%94%B5%E5%AD%90/"/>
    
    
  </entry>
  
  <entry>
    <title>java的lambda表达式</title>
    <link href="https://lmxy1990.github.io/2017/01/09/java%E7%9A%84lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://lmxy1990.github.io/2017/01/09/java的lambda表达式/</id>
    <published>2017-01-09T01:30:48.000Z</published>
    <updated>2017-01-09T01:38:36.484Z</updated>
    
    <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>lambda 表达式是1.8的特性.原预计是1.7的需求,但是因为竞争,收购,资金等等原因到1.8才出现.另外,java的lambda表达式与.net的有一定区别的.两者实现的方式不一样.java的lambda表达式是建立在匿名类(接口)之下延伸的.而.net是使用委托这一特性实现的.增加该特性的话,代码会简洁一些.</p>
<h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><p>无论是java还是.net使用方式都差不多.就是() -&gt; “return data” .入参 -&gt; 回参.</p>
<hr>
<h2 id="End"><a href="#End" class="headerlink" title="End"></a><center>End</center></h2>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;p&gt;lambda 表达式是1.8的特性.原预计是1.7的需求,但是因为竞争,收购,资金等等原因到1.8才出现.另外,java的lambda表达式
    
    </summary>
    
      <category term="JAVA基本工具类" scheme="https://lmxy1990.github.io/categories/JAVA%E5%9F%BA%E6%9C%AC%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    
    
  </entry>
  
</feed>
