<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lmxy1990 &#39; Blog</title>
  <subtitle>love code, enjoy life .</subtitle>
  <link href="//atom.xml" rel="self"/>
  
  <link href="https://lmxy1990.github.io/"/>
  <updated>2016-12-29T04:21:15.249Z</updated>
  <id>https://lmxy1990.github.io/</id>
  
  <author>
    <name>lmxy1990</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>设计模式之策略模式</title>
    <link href="https://lmxy1990.github.io/2016/12/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>https://lmxy1990.github.io/2016/12/28/设计模式之策略模式/</id>
    <published>2016-12-28T12:31:12.000Z</published>
    <updated>2016-12-29T04:21:15.249Z</updated>
    
    <content type="html"><![CDATA[<h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><p><br></p>
<hr>
<ul>
<li>策略模式是用于解决面向对象中的抽象类与接口的局限性.</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;策略模式&quot;&gt;&lt;a href=&quot;#策略模式&quot; class=&quot;headerlink&quot; title=&quot;策略模式&quot;&gt;&lt;/a&gt;策略模式&lt;/h2&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;策略模式是用于解决面向对象中的抽象类与接口的局限性.&lt;/li&gt;
&lt;/ul&gt;

    
    </summary>
    
      <category term="设计模式" scheme="https://lmxy1990.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>Markdown 基础语法</title>
    <link href="https://lmxy1990.github.io/2016/12/28/Markdown-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <id>https://lmxy1990.github.io/2016/12/28/Markdown-基础语法/</id>
    <published>2016-12-28T08:06:14.000Z</published>
    <updated>2016-12-28T12:23:25.044Z</updated>
    
    <content type="html"><![CDATA[<h2 id="markdown基本语法"><a href="#markdown基本语法" class="headerlink" title="markdown基本语法."></a>markdown基本语法.</h2><h3 id="文字类"><a href="#文字类" class="headerlink" title="文字类"></a>文字类</h3><hr>
<ul>
<li>标题大小用<code>#</code>来标记,等同于html的<code>&lt;h1&gt;&lt;/h1&gt;</code>标签.</li>
<li>内容的强调使用<code>*</code>或<code>_</code> 来标记.</li>
</ul>
<ul>
<li>有序列表使用<code>数字.</code>来标记.</li>
</ul>
<ul>
<li>无序列表使用<code>* 或- 或+</code>来标记.</li>
</ul>
<ul>
<li>小代码使用2个`来标记.代码块使用3个`来标记.</li>
<li>如果需要显示单个代码,也可以使用\来标记该字符不被解析.</li>
<li>代码块一种更简便的方式是在开头使用一个tab.</li>
</ul>
<ul>
<li>列表的嵌套使用tab+列表标记.</li>
</ul>
<ul>
<li>空行直接使用html的标记<code>&lt;br/&gt;</code><br><br></li>
</ul>
<h3 id="连接类"><a href="#连接类" class="headerlink" title="连接类"></a>连接类</h3><hr>
<ul>
<li>页面内的跳转.<ol>
<li>使用<code>&lt;span id =&quot;bijiao&quot;&gt;&lt;/span&gt;</code> 定义一个要跳转的地方.</li>
<li>使用<code>&lt;a href=&quot;#biaoqian&quot;&gt;跳&lt;/a&gt;</code>或者<code>[跳](#biaoqian)</code>来实现跳转.</li>
</ol>
</li>
<li>其他跳转.使用<code>&lt;a href=&quot;地址&quot;&gt;跳&lt;/a&gt;</code>或者<code>[跳](地址)</code>来实现跳转.</li>
</ul>
<h3 id="图片类"><a href="#图片类" class="headerlink" title="图片类"></a>图片类</h3><hr>
<ol>
<li>使用<code>&lt;img src=&quot;地址&quot;&gt;名称&lt;/img&gt;</code>或者<code>![名称](地址)</code>来实现.</li>
</ol>
<h3 id="音视频"><a href="#音视频" class="headerlink" title="音视频"></a>音视频</h3><hr>
<ol>
<li>声音:使用<code>&lt;audio src=&quot;地址&quot; autoplay=&quot;true&quot;&gt;声音&lt;/audio&gt;</code>来实现</li>
<li>视频:使用<code>&lt;video src=&quot;地址&quot; autoplay=&quot;true&quot;&gt;视频&lt;/video&gt;</code>来实现<br><br><br><br><h4 id="总结来说-mardown完全可以使用html标签来写-不过-html写起来麻烦-但是一些功能目前来说-markdown还不支持-所以只能采用html的标签来实现-来外-颜色样式的定义-好像也不可以-也只能用html-个人理解markdown只是html的一个框架-对html的一个封装"><a href="#总结来说-mardown完全可以使用html标签来写-不过-html写起来麻烦-但是一些功能目前来说-markdown还不支持-所以只能采用html的标签来实现-来外-颜色样式的定义-好像也不可以-也只能用html-个人理解markdown只是html的一个框架-对html的一个封装" class="headerlink" title="总结来说,mardown完全可以使用html标签来写.不过,html写起来麻烦.但是一些功能目前来说,markdown还不支持,所以只能采用html的标签来实现.来外,颜色样式的定义.好像也不可以.也只能用html.个人理解markdown只是html的一个框架.对html的一个封装."></a>总结来说,mardown完全可以使用html标签来写.不过,html写起来麻烦.但是一些功能目前来说,markdown还不支持,所以只能采用html的标签来实现.来外,颜色样式的定义.好像也不可以.也只能用html.个人理解markdown只是html的一个框架.对html的一个封装.</h4></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;markdown基本语法&quot;&gt;&lt;a href=&quot;#markdown基本语法&quot; class=&quot;headerlink&quot; title=&quot;markdown基本语法.&quot;&gt;&lt;/a&gt;markdown基本语法.&lt;/h2&gt;&lt;h3 id=&quot;文字类&quot;&gt;&lt;a href=&quot;#文字类&quot; cla
    
    </summary>
    
      <category term="markdown" scheme="https://lmxy1990.github.io/categories/markdown/"/>
    
    
      <category term="markdown" scheme="https://lmxy1990.github.io/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>git的使用</title>
    <link href="https://lmxy1990.github.io/2016/12/27/git%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://lmxy1990.github.io/2016/12/27/git的使用/</id>
    <published>2016-12-27T06:58:27.000Z</published>
    <updated>2016-12-27T07:23:27.730Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Git初次使用一般来说就5步"><a href="#Git初次使用一般来说就5步" class="headerlink" title="Git初次使用一般来说就5步."></a>Git初次使用一般来说就5步.</h2><ol>
<li><p>cd 你的目录  //进入你需要提交的目录.</p>
</li>
<li><p>git init //初始化.</p>
</li>
<li><p>git add * //添加需要提交的文件.</p>
</li>
<li><p>git commit -m “第一次提交”  //提交的说明.</p>
</li>
<li><p>git remote add origin <a href="https://github.com/lmxy1990/test.git" target="_blank" rel="external">https://github.com/lmxy1990/test.git</a> //添加远程仓库地址</p>
</li>
<li><p>git push -u origin master //提交 到主干</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Git初次使用一般来说就5步&quot;&gt;&lt;a href=&quot;#Git初次使用一般来说就5步&quot; class=&quot;headerlink&quot; title=&quot;Git初次使用一般来说就5步.&quot;&gt;&lt;/a&gt;Git初次使用一般来说就5步.&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;cd 你的目录  //
    
    </summary>
    
      <category term="Git初次使用" scheme="https://lmxy1990.github.io/categories/Git%E5%88%9D%E6%AC%A1%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="git" scheme="https://lmxy1990.github.io/tags/git/"/>
    
  </entry>
  
</feed>
