<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lmxy1990 &#39; Blog</title>
  <subtitle>love code, enjoy life .</subtitle>
  <link href="//atom.xml" rel="self"/>
  
  <link href="https://lmxy1990.github.io/"/>
  <updated>2017-06-07T02:28:28.094Z</updated>
  <id>https://lmxy1990.github.io/</id>
  
  <author>
    <name>lmxy1990</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JAVA中的值类型,引用类型以及克隆</title>
    <link href="https://lmxy1990.github.io/2017/06/06/JAVA%E4%B8%AD%E7%9A%84%E5%80%BC%E7%B1%BB%E5%9E%8B-%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B%E4%BB%A5%E5%8F%8A%E5%85%8B%E9%9A%86/"/>
    <id>https://lmxy1990.github.io/2017/06/06/JAVA中的值类型-引用类型以及克隆/</id>
    <published>2017-06-06T11:51:10.000Z</published>
    <updated>2017-06-07T02:28:28.094Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JAVA中的引用类型与值类型"><a href="#JAVA中的引用类型与值类型" class="headerlink" title="JAVA中的引用类型与值类型"></a>JAVA中的引用类型与值类型</h3><hr>
<p>1.引用类型<br>数组,集合,接口,类都是引用类型.</p>
<p>2.值类型<br>所有基本类型:int,short,long 及与之对应的Long,Integer,Double,<br>以及布尔类型boolead,Boolead 也包括Bigdecimal都属于值类型.</p>
<p>3.区别<br>这里不考虑实现,究其底层.只考虑Java中的二者之间的差异.<br>值类型:也就是改变原值,对其之前赋的变量的值没有影响.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">BigDecimal d1 = BigDecimal.ONE ;</div><div class="line">BigDecimal d2 = d1 ;</div><div class="line">d1 = d1.add(BigDecimal.ONE) ;</div><div class="line"></div><div class="line">System.out.println(d1);</div><div class="line">System.out.println(d2);</div></pre></td></tr></table></figure></p>
<p>结果如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td></tr></table></figure></p>
<p>引用类型:改变原值,对其之前使用=赋值的变量也会有影响.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">int[] ar = &#123;1,2,3&#125; ;</div><div class="line">int[] br = ar ;</div><div class="line">ar[0] = 2 ;</div><div class="line">ar[1] = 3 ;</div><div class="line">ar[2] = 4 ;</div><div class="line">for (int i = 0; i &lt; ar.length; i++) &#123;</div><div class="line">    int i1 = ar[i];</div><div class="line">    System.out.println(i1);</div><div class="line">&#125;</div><div class="line"></div><div class="line">for (int i = 0; i &lt; br.length; i++) &#123;</div><div class="line">    int i1 = br[i];</div><div class="line">    System.out.println(i1);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>结果如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">2</div><div class="line">1</div></pre></td></tr></table></figure></p>
<p>4.浅析原理.<br>有一种说法是java没有值类型.其实角度不一样.从原理上来说确实没有.但从表象上来说是有的.因为在赋值运算的时候.遇到基本类型是新开辟内存空间.遇到引用类型是改变指针指向的地址.这区别与java对赋值运算的实现.</p>
<p>所以,java官方说基本类型是值类型.那就是说,赋值运算在对待基本类型的赋值与引用类型时候,会采用不同的方式去处理.这区别于C/C++.</p>
<p>这一点其实在对待Long Integer 类的赋值的时候,就可以看出来了.至于为什么基本类型赋值是新开辟,而引用类型是修改指针地址.这可能是因为所占对象大小,基本类型占用低,使用修改频繁.所以新增这样的对象所消耗内存少.而引用类型的内存消耗完全取决用用户的定义.故赋值采用的是改变指针的指向.而非new 对象.但是java提供一个克隆的方法.用于新开辟内存而非改变指针指向内存地址.</p>
<p>至于如果引用类型需要拷贝而不是改变指针的地址进行的赋值时候.可以采用克隆或者直接new 对象.然后进行对基本类型的赋值操作.遇到引用类型,就需要new/克隆去开辟新的内存空间.这样才能改变原对象的值,不会影响克隆的变量.</p>
<h3 id="克隆"><a href="#克隆" class="headerlink" title="克隆"></a>克隆</h3><hr>
<p>1.实现Cloneable接口<br>2.覆写Object的clone方法.<br>3.如果对象存在非基本类型,还需要修改覆写的方法.<br>eg: Java 自带的Calendar类覆写的clone方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public Object clone()</div><div class="line">&#123;</div><div class="line">    try &#123;</div><div class="line">        Calendar other = (Calendar) super.clone();</div><div class="line"></div><div class="line">        other.fields = new int[FIELD_COUNT];</div><div class="line">        other.isSet = new boolean[FIELD_COUNT];</div><div class="line">        other.stamp = new int[FIELD_COUNT];</div><div class="line">        for (int i = 0; i &lt; FIELD_COUNT; i++) &#123;</div><div class="line">            other.fields[i] = fields[i];</div><div class="line">            other.stamp[i] = stamp[i];</div><div class="line">            other.isSet[i] = isSet[i];</div><div class="line">        &#125;</div><div class="line">        other.zone = (TimeZone) zone.clone();</div><div class="line">        return other;</div><div class="line">    &#125;</div><div class="line">    catch (CloneNotSupportedException e) &#123;</div><div class="line">        // this shouldn&apos;t happen, since we are Cloneable</div><div class="line">        throw new InternalError(e);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>以上例子就是覆写clone方法.如果没有引用类型.那只需要调用超类的方法即可.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">protected Object clone() throws CloneNotSupportedException &#123;</div><div class="line">    return super.clone();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="End"><a href="#End" class="headerlink" title="End"></a><center>End</center></h2>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;JAVA中的引用类型与值类型&quot;&gt;&lt;a href=&quot;#JAVA中的引用类型与值类型&quot; class=&quot;headerlink&quot; title=&quot;JAVA中的引用类型与值类型&quot;&gt;&lt;/a&gt;JAVA中的引用类型与值类型&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;1.引用类型&lt;br&gt;数组,集合,接
    
    </summary>
    
      <category term="java基础" scheme="https://lmxy1990.github.io/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>SQL 相关备忘录</title>
    <link href="https://lmxy1990.github.io/2017/06/06/SQL%20%E7%9B%B8%E5%85%B3%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    <id>https://lmxy1990.github.io/2017/06/06/SQL 相关备忘录/</id>
    <published>2017-06-06T02:33:25.000Z</published>
    <updated>2017-06-06T11:53:37.017Z</updated>
    
    <content type="html"><![CDATA[<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><hr>
<p>GREATEST() 取出多个表达式中最大的值.</p>
<p>LEAST() 取出多个表达式中最小的值</p>
<h3 id="常用语句"><a href="#常用语句" class="headerlink" title="常用语句"></a>常用语句</h3><hr>
<hr>
<h2 id="End"><a href="#End" class="headerlink" title="End"></a><center>End</center></h2>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;GREATEST() 取出多个表达式中最大的值.&lt;/p&gt;
&lt;p&gt;LEAST() 取出多个表达式中最小的值&lt;/p&gt;
&lt;h3 id=&quot;
    
    </summary>
    
      <category term="SQL" scheme="https://lmxy1990.github.io/categories/SQL/"/>
    
    
  </entry>
  
  <entry>
    <title>java中标志位的使用&#39;</title>
    <link href="https://lmxy1990.github.io/2017/06/01/java%E6%A0%87%E5%BF%97%E4%BD%8D%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://lmxy1990.github.io/2017/06/01/java标志位的使用/</id>
    <published>2017-06-01T09:24:11.000Z</published>
    <updated>2017-06-02T01:37:59.035Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Java-位操作"><a href="#Java-位操作" class="headerlink" title="Java 位操作"></a>Java 位操作</h3><hr>
<p>1.位左移(符号位不变)<br><code>&lt;&lt;</code><br>2.位右移(符号位不变)<br><code>&gt;&gt;</code><br>3.无符号的位移(空位补零,不考虑符号位)<br><code>&lt;&lt;&lt;</code>  ‘&gt;&gt;&gt;’<br>4.或<br><code>|</code><br>5.与<br><code>&amp;</code><br>6.按位取反<br><code>~</code><br>7.异或<br><code>^</code></p>
<h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h3><hr>
<p>用途有点类似控制器上的拨码开关.<code>00001001001</code> .一般来说,用0代表无,1代表有.每一个符号位代表一种权限.这种应用在多权限的场景下很容易解决N权限的问题.</p>
<h3 id="Java-代码"><a href="#Java-代码" class="headerlink" title="Java 代码"></a>Java 代码</h3><hr>
<p>判断方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">//复合权限判断</div><div class="line">   private static boolean isHasAllAuthority(long ready,long authority)&#123;</div><div class="line">       return (ready &amp; authority) == authority ? true :false ;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   //添加权限</div><div class="line">   private static long addAuthority(long ready,long authority)&#123;</div><div class="line"></div><div class="line">       return ready | authority;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   //删除权限</div><div class="line">   private static long removeAuthority(long ready,long authority)&#123;</div><div class="line"></div><div class="line">       return (ready | authority) ^ authority ;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>测试方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">long pp1 = 1&lt;&lt;1 ;</div><div class="line">long pp2 = 1&lt;&lt;2 ;</div><div class="line">long pp3 = 1&lt;&lt;3 ;</div><div class="line">long pp4 = 1&lt;&lt;4 ;</div><div class="line"></div><div class="line">//初始化权限</div><div class="line">long ready = 0L ;</div><div class="line"></div><div class="line">//添加1,4权限</div><div class="line">ready = addAuthority(ready,pp1) ;</div><div class="line">ready = addAuthority(ready,pp4) ;</div><div class="line"></div><div class="line">//删除1,3权限</div><div class="line">ready = removeAuthority(ready,pp1|pp3) ;</div><div class="line"></div><div class="line">//判断是否拥有1权限</div><div class="line">System.out.println(&quot;判断是否拥有1权限&quot; + isHasAllAuthority(ready,pp1));</div><div class="line">//判断是否拥有3权限</div><div class="line">System.out.println(&quot;判断是否拥有3权限&quot; + isHasAllAuthority(ready,pp3));</div><div class="line">//判断是否拥有4权限</div><div class="line">System.out.println(&quot;判断是否拥有4权限&quot; + isHasAllAuthority(ready,pp4));</div><div class="line">//判断是否拥有1,4权限</div><div class="line">System.out.println(&quot;判断是否拥有1,4权限&quot; + isHasAllAuthority(ready,pp1|pp4));</div></pre></td></tr></table></figure></p>
<p>结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">判断是否拥有1权限false</div><div class="line">判断是否拥有3权限false</div><div class="line">判断是否拥有4权限true</div><div class="line">判断是否拥有1,4权限false</div><div class="line"></div><div class="line">Process finished with exit code 0</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="End"><a href="#End" class="headerlink" title="End"></a><center>End</center></h2>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Java-位操作&quot;&gt;&lt;a href=&quot;#Java-位操作&quot; class=&quot;headerlink&quot; title=&quot;Java 位操作&quot;&gt;&lt;/a&gt;Java 位操作&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;1.位左移(符号位不变)&lt;br&gt;&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;&lt;br&gt;
    
    </summary>
    
      <category term="bit java" scheme="https://lmxy1990.github.io/categories/bit-java/"/>
    
    
  </entry>
  
  <entry>
    <title>java stream 流处理</title>
    <link href="https://lmxy1990.github.io/2017/05/16/java-stream-%E6%B5%81%E5%A4%84%E7%90%86/"/>
    <id>https://lmxy1990.github.io/2017/05/16/java-stream-流处理/</id>
    <published>2017-05-16T05:56:41.000Z</published>
    <updated>2017-05-16T09:12:52.400Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Java-Stream-流处理"><a href="#Java-Stream-流处理" class="headerlink" title="Java Stream 流处理"></a>Java Stream 流处理</h3><hr>
<p>jdk1.8之前,处理文字数字都是赋值给相应变量来进行处理.1.8之后,支持是用流来处理.这里的流处理,是对值进行的聚合处理.里面有python的map影子.</p>
<ol>
<li>流的列别.</li>
</ol>
<ul>
<li>IntStream、LongStream、DoubleStream。当然我们也可以用 Stream<integer>、Stream<long> &gt;、Stream<double>，但是 boxing 和 unboxing会很耗时.</double></long></integer></li>
</ul>
<ol>
<li>流的获取.<ol>
<li>使用集合类.<code>Collection.stream()</code> 或者<code>Collection.parallelStream()</code> </li>
<li>通过数组获取.<code>Arrays.stream(T array) or Stream.of()</code></li>
<li>通过java的IO.<code>java.io.BufferedReader.lines()</code></li>
<li>静态工厂.<code>java.util.stream.IntStream.range()</code> 或<code>java.nio.file.Files.walk()</code></li>
<li>自己构建. <code>java.util.Spliterator</code></li>
<li>其他:<ul>
<li>Random.ints()</li>
<li>BitSet.stream()</li>
<li>Pattern.splitAsStream(java.lang.CharSequence)</li>
<li>JarFile.stream()</li>
</ul>
</li>
</ol>
</li>
<li>流处理的分类<ul>
<li>Intermediate：<ul>
<li>一个流可以后面跟随零个或多个 intermediate 操作。其目的主要是打开流，做出某种程度的数据映射/过滤，然后返回一个新的流，交给下一个操作使用。这类操作都是惰性化的（lazy），就是说，仅仅调用到这类方法，并没有真正开始流的遍历。</li>
<li>包含:map (mapToInt, flatMap 等)、 filter、 distinct、 sorted、 peek、 limit、 skip、 parallel、 sequential、 unordered</li>
</ul>
</li>
<li>Terminal:<ul>
<li>一个流只能有一个 terminal 操作，当这个操作执行后，流就被使用“光”了，无法再被操作。所以这必定是流的最后一个操作。Terminal 操作的执行，才会真正开始流的遍历，并且会生成一个结果，或者一个 side effect。</li>
<li>包含:forEach、 forEachOrdered、 toArray、 reduce、 collect、 min、 max、 count、 anyMatch、 allMatch、 noneMatch、 findFirst、 findAny、 iterator</li>
</ul>
</li>
<li>short-circuiting:<ul>
<li>当操作一个无限大的 Stream，而又希望在有限时间内完成操作，则在管道内拥有一个 short-circuiting 操作是必要非充分条件.</li>
<li>包含:anyMatch、 allMatch、 noneMatch、 findFirst、 findAny、 limit</li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="常见的流操作"><a href="#常见的流操作" class="headerlink" title="常见的流操作"></a>常见的流操作</h3><ol>
<li>查询流里面元素是否为null<br><code>Arrays.asList(&quot;小明&quot;, &quot;小王&quot;, &quot;小李&quot;).stream().findAny().ifPresent(System.out::print);</code></li>
</ol>
<p><code>Arrays.asList(&quot;小明&quot;, &quot;小王&quot;, &quot;小李&quot;).stream().findFirst().ifPresent(System.out::print);</code></p>
<p>2.匹配<br><code>Arrays.asList(&quot;小明&quot;, &quot;小王&quot;, &quot;小李&quot;).stream().anyMatch(s -&gt; s.equals(&quot;小王&quot;))</code></p>
<p><code>Arrays.asList(&quot;小明&quot;, &quot;小王&quot;, &quot;小李&quot;).stream().allMatch(s -&gt; s.equals(&quot;小王&quot;)) ;</code></p>
<p><code>Arrays.asList(&quot;小明&quot;, &quot;小王&quot;, &quot;小李&quot;).stream().noneMatch(s -&gt; s.equals(&quot;小王&quot;)) ;</code></p>
<p>3.过滤<br><code>Arrays.asList(&quot;小明&quot;, &quot;小王&quot;, &quot;小李&quot;).stream().filter(va -&gt; !va.equals(&quot;小王&quot;)).forEach(System.out::print);</code></p>
<p>4.映射(1对1)<br><code>Arrays.asList(&quot;小明&quot;, &quot;小王&quot;, &quot;小李&quot;).stream().map(va -&gt; &quot;打豆豆&quot; + va ).forEachOrdered(System.out :: print);</code></p>
<p>5.映射(多对一)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Arrays.asList(</div><div class="line">           Arrays.asList(&quot;小明&quot;),</div><div class="line">           Arrays.asList(&quot;小明&quot;, &quot;小王&quot;),</div><div class="line">           Arrays.asList(&quot;小明&quot;, &quot;小王&quot;, &quot;小李&quot;)</div><div class="line">   ).stream().flatMap(va -&gt; va.stream().map(a -&gt; a + &quot;不打豆豆&quot;)).forEach(s -&gt; System.out.println(s + &quot;了&quot;));</div></pre></td></tr></table></figure></p>
<p>6.排序<br><code>Arrays.asList(1, 2, 3).stream().sorted(Comparator.naturalOrder()) ;</code></p>
<p><code>Arrays.asList(1, 2, 3).stream().sorted(Integer::compareTo) ;</code></p>
<p>7.截取(limit是截取前N个,skip是丢弃前N个)<br><code>Arrays.asList(&quot;小明&quot;, &quot;小王&quot;, &quot;小李&quot;).stream().limit(2).forEach(System.out::print);</code></p>
<p><code>Arrays.asList(&quot;小明&quot;, &quot;小王&quot;, &quot;小李&quot;).stream().skip(2).forEach(System.out::print);</code></p>
<p>8.组合 (组合的第一个参数代表截止条件,第二个代表依次处理数据的方法) 类似与python的reduce.只是传参的方式不一样.使用组合可以实现字符串连接,取最大值,最小值,排序..<br><code>String reduce = Arrays.asList(&quot;小明&quot;, &quot;小王&quot;, &quot;小李&quot;).stream().reduce(&quot;&quot;, (v1, v2) -&gt; v1 + v2);</code></p>
<p><code>Integer reduce = Arrays.asList(1, 2, 3).stream().reduce(Integer.MAX_VALUE, Integer::min);</code></p>
<h3 id="附录"><a href="#附录" class="headerlink" title="附录:"></a>附录:</h3><p>参考文档:<a href="https://www.ibm.com/developerworks/cn/java/j-lo-java8streamapi/" target="_blank" rel="external">链接地址</a></p>
<hr>
<h2 id="End"><a href="#End" class="headerlink" title="End"></a><center>End</center></h2>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Java-Stream-流处理&quot;&gt;&lt;a href=&quot;#Java-Stream-流处理&quot; class=&quot;headerlink&quot; title=&quot;Java Stream 流处理&quot;&gt;&lt;/a&gt;Java Stream 流处理&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;jdk1.8之前,处理文字
    
    </summary>
    
      <category term="java stream" scheme="https://lmxy1990.github.io/categories/java-stream/"/>
    
    
  </entry>
  
  <entry>
    <title>Android 开发入门</title>
    <link href="https://lmxy1990.github.io/2017/05/10/Android-%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/"/>
    <id>https://lmxy1990.github.io/2017/05/10/Android-开发入门/</id>
    <published>2017-05-10T06:52:59.000Z</published>
    <updated>2017-05-16T03:34:46.900Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h2 id="End"><a href="#End" class="headerlink" title="End"></a><center>End</center></h2>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h2 id=&quot;End&quot;&gt;&lt;a href=&quot;#End&quot; class=&quot;headerlink&quot; title=&quot;End&quot;&gt;&lt;/a&gt;&lt;center&gt;End&lt;/center&gt;&lt;/h2&gt;
    
    </summary>
    
      <category term="Andriod" scheme="https://lmxy1990.github.io/categories/Andriod/"/>
    
    
  </entry>
  
  <entry>
    <title>python 笔记 </title>
    <link href="https://lmxy1990.github.io/2017/04/13/python-%E7%AC%94%E8%AE%B0/"/>
    <id>https://lmxy1990.github.io/2017/04/13/python-笔记/</id>
    <published>2017-04-13T07:06:50.000Z</published>
    <updated>2017-05-10T08:06:42.572Z</updated>
    
    <content type="html"><![CDATA[<h3 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h3><p>python 是弱类型语言.但其也有标准的类型.</p>
<p>Numbers（12）<br>String（’abc’）<br>List（[1,2]）<br>Tuple（(1,2)）<br>Dictionary（{‘Michael’: 95, ‘Bob’: 75, ‘Tracy’: 85}）<br>Set (([1, 2, 3]))</p>
<p>变量不需要定义,直接使用变量名进行赋值. 赋值指定格式就是相应的类型.<br>Numbers 相当于java的int,short,long 合集.<br>String 跟java的一样.<br>List 一样<br>Set 一样.<br>Tuple 相当于数组<br>Dict 相当于Map C# 也是dict.</p>
<p><span style="columns: red;">ps: python 是根据缩进来判断作用域的.</span></p>
<h3 id="函数定义-调用"><a href="#函数定义-调用" class="headerlink" title="函数定义/调用"></a>函数定义/调用</h3><p>定义函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">def functionA(X):</div><div class="line">     return x*x ;</div></pre></td></tr></table></figure></p>
<p>调用函数<br><code>print(functionA(3)) ;</code></p>
<h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><p>1.切片,取出list或者tuple中部分元素.<br>L = [‘aaa’,’bbb’,’ccc’]</p>
<p>正序取:第一个是取出位置(包括该位置的元素),第二个是截止位置(不包括该位置的元素)<br>取出第一个元素L[0:1]<br>取出前2个元素:L[0:2]<br>倒序取:第一个是倒序截止位置(包括),第二个倒序是开始取值位置(不包括).<br>取出最后一个元素:L[-1]<br>取出倒数第二个元素:L[-1:-2]</p>
<p>2.迭代.遍历对象<br>for var in object</p>
<p>可以通过<code>isinstance(checkObject, Iterable)</code>来判断该对象是否可以进行迭代.<br>不推荐使用(objct) is type(object1) 来进行类型检查是因为type不可靠.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">class A():</div><div class="line">    pass;</div><div class="line">class B():</div><div class="line">    pass;</div><div class="line">type(A) is type(B) ;</div><div class="line">&gt;&gt;&gt;True</div></pre></td></tr></table></figure></p>
<p>遍历dict对象的key<br><code>for  key in dict</code></p>
<p>遍历dict对象的value<br><code>for var in dict.valuse()</code></p>
<p>遍历key与value<br><code>for k,v in dict.items()</code></p>
<p>遍历list的下标与值<br><code>for i,v in enumerate(list)</code></p>
<p>3.构造器<br>生成1,2,3…9的list<br><code>range(1,10)</code><br>生成 1,4,9…81的 list<br><code>[x*x for x in range(1,10)]</code></p>
<p>4.赋值<br>可以同时多个赋值.<br><code>a,b,c = 1,2,3 ;</code></p>
<h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><p>1.map /reduce python的map不同于java..</p>
<p>map 是对每个子元素进行函数运算.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">def f(x) :</div><div class="line">    return x*x ;</div><div class="line"></div><div class="line">map(f,range(1,10));</div></pre></td></tr></table></figure></p>
<p>输出:[1,4,9,25,36,49,64,81]</p>
<p>reduce 是对没两个元素进行操作.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">def fx(x,y):</div><div class="line">    return x*y +x+y ;</div><div class="line">reduce(fx,range(1,10)) ;</div></pre></td></tr></table></figure></p>
<p>2.filter 过滤函数<br>filter 是对每个元素进行检查,返回true的保留.返回false的删除.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">def ff(x):</div><div class="line">    if (x &gt; 5):</div><div class="line">        return true ;</div><div class="line">    else:</div><div class="line">    return false ;</div><div class="line">filter(ff,range(1,10)) ;</div></pre></td></tr></table></figure></p>
<p>3.sorted 排序<br>升序<br><code>sorted([36, 5, -12, 9, -21])</code><br>绝对值升序排序<br><code>sorted([36, 5, -12, 9, -21],key=abs)</code><br>忽略大小写升序排序<br><code>sorted([&#39;bob&#39;, &#39;about&#39;, &#39;Zoo&#39;, &#39;Credit&#39;], key=str.lower</code><br>倒序<br><code>sorted([36, 5, -12, 9, -21],reverse=true)</code></p>
<p>4.lambda表达式<br>传入x,y 返回 x<em>y<br>`lambda x,y:x</em>y`</p>
<p>5.装饰器<br>装饰器是面向切面编程的概念,主要目的是对程序进行相同代码块的冗余去除.</p>
<p>定义装饰器:<br>参数:<em>args 称作为数组参数，*</em>kwargs 称作为字典参数.表示可以传进来任意类型任意值.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">def log(func):</div><div class="line">    def proxy_f(*args,**avg):</div><div class="line">        return func(*args,**avg) ;</div><div class="line">    return proxy_f ;</div></pre></td></tr></table></figure></p>
<p>使用装饰器.<br>在对应的函数前加上@log就可以.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@log</div><div class="line">def now():</div><div class="line">    print(&apos;2015-3-25&apos;) ;</div><div class="line"></div><div class="line">//调用</div><div class="line">now() ;</div></pre></td></tr></table></figure></p>
<p>也可以这样使用装饰器<br><code>now = log(now)</code></p>
<p>6.偏函数<br>目的:把一个函数的某些参数给固定住（也就是设置默认值），返回一个新的函数，调用这个新函数会更简单.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; import functools</div><div class="line">&gt;&gt;&gt; int2 = functools.partial(int, base=2)</div><div class="line">&gt;&gt;&gt; int2(&apos;1000000&apos;)</div><div class="line">64</div><div class="line">&gt;&gt;&gt; int2(&apos;1010101&apos;)</div><div class="line">85</div></pre></td></tr></table></figure></p>
<h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><p>1.概述<br>python 的模块有点类似于java的包–类这样的结构.一个python文件相当于一个模块.不同模块的函数名可以相同.单不要与内置的函数名重名.模块名之外,是包名,类似于java.不过包名目录必须有<em>init</em>.py这个文件.</p>
<p>2.使用模块<br>导入模块 (模块名不含.py,跟java引入类一样,不含.class)<br><code>import model_name</code></p>
<p>2.使用模块(模块名.函数名来调用相应模块的函数.)<br><code>model_name.func_name</code></p>
<p>3.使用pip工具安装模块<br><code>pip install 模块名</code></p>
<p>4.模块搜索路径<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">import sys</div><div class="line"></div><div class="line">sys.path</div></pre></td></tr></table></figure></p>
<p>5.添加自定义的搜索路径<br>添加环境变量:PYTHONPATH</p>
<h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><ol>
<li>类/对象(实例)<br>与一般面向对象语言定义基本一致.</li>
</ol>
<p>2.区别(下划线都是两个)<br>可以不定义成员属性,直接使用self.XX来赋值.也可以定义一个默认的成员属性.也可以在实例化后定义…<br>初始化构造器(连续两个下划线):<br><code>def __init__ (paramter1,...)</code></p>
<p>以<strong>XX</strong> 定义的方法(函数)是特殊函数方法.例如:<strong>init</strong><br>以__XX定义的成员变量/方法(函数) 是私有的(private).不能被外部访问.<br>以_XX定义的变量/方法 外部不应该去访问它.但实际是可以访问到的.</p>
<p>不能通过实例.__XX 来对私有变量进行赋值.这样赋值是赋值给一个新的变量,而非该实例的内部成员变量.<br>这样是错误代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; bart = Student(&apos;Bart Simpson&apos;, 98)</div><div class="line">&gt;&gt;&gt; bart.get_name()</div><div class="line">&apos;Bart Simpson&apos;</div><div class="line">&gt;&gt;&gt; bart.__name = &apos;New Name&apos; # 设置__name变量！</div><div class="line">&gt;&gt;&gt; bart.__name</div><div class="line">&apos;New Name&apos;</div></pre></td></tr></table></figure></p>
<p>3.继承与多态<br>继承父类,覆写父类方法.符合李氏替换原则.遵循多态.</p>
<p>对于静态语言（例如Java）来说，如果需要传入Animal类型，则传入的对象必须是Animal类型或者它的子类，否则，将无法调用run()方法。</p>
<p>对于Python这样的动态语言来说，则不一定需要传入Animal类型。我们只需要保证传入的对象有一个run()方法就可以了：</p>
<p>4.成员属性限制:<br><code>__slots__ = (&#39;name&#39;, &#39;age&#39;) # 用tuple定义允许绑定的属性名称</code></p>
<h3 id="IO-编程"><a href="#IO-编程" class="headerlink" title="IO 编程"></a>IO 编程</h3><hr>
<h2 id="End"><a href="#End" class="headerlink" title="End"></a><center>End</center></h2>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;变量类型&quot;&gt;&lt;a href=&quot;#变量类型&quot; class=&quot;headerlink&quot; title=&quot;变量类型&quot;&gt;&lt;/a&gt;变量类型&lt;/h3&gt;&lt;p&gt;python 是弱类型语言.但其也有标准的类型.&lt;/p&gt;
&lt;p&gt;Numbers（12）&lt;br&gt;String（’abc’）&lt;b
    
    </summary>
    
      <category term="python" scheme="https://lmxy1990.github.io/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>java AIO NIO BIO</title>
    <link href="https://lmxy1990.github.io/2017/04/10/java-AIO-NIO-BIO/"/>
    <id>https://lmxy1990.github.io/2017/04/10/java-AIO-NIO-BIO/</id>
    <published>2017-04-10T02:23:54.000Z</published>
    <updated>2017-04-10T03:18:07.355Z</updated>
    
    <content type="html"><![CDATA[<h3 id="AIO-NIO-BIO-概念"><a href="#AIO-NIO-BIO-概念" class="headerlink" title="AIO NIO BIO 概念"></a>AIO NIO BIO 概念</h3><p>AIO 异步非阻塞读写.</p>
<p>NIO 非阻塞读写.</p>
<p>BIO 阻塞读写.</p>
<p>同步与异步:表示目的.</p>
<p>阻塞与非阻塞:实现(同步/异步)方式.</p>
<p>AIO 的异步非阻塞,是指的执行IO的线程异步.一个请求一个线程.</p>
<p>NIO 查询IO时候非阻塞.使用IO时候阻塞.</p>
<p>BIO 查询IO阻塞,执行IO时候阻塞.</p>
<hr>
<h2 id="End"><a href="#End" class="headerlink" title="End"></a><center>End</center></h2>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;AIO-NIO-BIO-概念&quot;&gt;&lt;a href=&quot;#AIO-NIO-BIO-概念&quot; class=&quot;headerlink&quot; title=&quot;AIO NIO BIO 概念&quot;&gt;&lt;/a&gt;AIO NIO BIO 概念&lt;/h3&gt;&lt;p&gt;AIO 异步非阻塞读写.&lt;/p&gt;
&lt;p&gt;NI
    
    </summary>
    
      <category term="AIO NIO BIO" scheme="https://lmxy1990.github.io/categories/AIO-NIO-BIO/"/>
    
    
  </entry>
  
  <entry>
    <title>sql 中 Where与Having的区别</title>
    <link href="https://lmxy1990.github.io/2017/04/01/sql-%E4%B8%AD-Where%E4%B8%8EHaving%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://lmxy1990.github.io/2017/04/01/sql-中-Where与Having的区别/</id>
    <published>2017-04-01T09:05:34.000Z</published>
    <updated>2017-04-10T02:55:35.996Z</updated>
    
    <content type="html"><![CDATA[<h3 id="关于Where与having的原理"><a href="#关于Where与having的原理" class="headerlink" title="关于Where与having的原理"></a>关于Where与having的原理</h3><p>Where 的原理是根据条件去检索.<br>Having 是根据条件从检索到的内容中根据条件来筛选.</p>
<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>能使用Where的尽量使用Where.虽然都是遍历.不过机制上来说,前置速度会快些.</p>
<p>但是涉及一些结果处理来筛选的时候.<br>例如:两列的值相减大于某个数的行.<br><code>SELECT *,(t.c1-t.c2) as tt FROM for_pan_test.new_table t having tt &gt;0;</code></p>
<p><code>SELECT *,(t.c1-t.c2) as tt FROM for_pan_test.new_table t where  (t.c1-t.c2) &gt;0;</code></p>
<p>这样都可以的.但是如果出现聚合,那就必须使用having了.因为在聚合之前,是不知道该值的(SQL92 标准不支持该查询.SQL99之后支持如果出现sql_model=only_full_group_by.disable该模式 <a href="https://dev.mysql.com/doc/refman/5.7/en/group-by-handling.html" target="_blank" rel="external">详见</a>).</p>
<p><code>SELECT *,(sum(t.c1)-t.c2) as tt FROM for_pan_test.new_table t group by t.s1 having tt &gt;0;</code></p>
<p>这时候使用where的结果就行了.<br><code>SELECT *,(sum(t.c1)-t.c2) as tt FROM for_pan_test.new_table t where  (t.c1-t.c2) &gt;0 group by s1;</code></p>
<hr>
<h2 id="End"><a href="#End" class="headerlink" title="End"></a><center>End</center></h2>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;关于Where与having的原理&quot;&gt;&lt;a href=&quot;#关于Where与having的原理&quot; class=&quot;headerlink&quot; title=&quot;关于Where与having的原理&quot;&gt;&lt;/a&gt;关于Where与having的原理&lt;/h3&gt;&lt;p&gt;Where 的原理是
    
    </summary>
    
      <category term="mysql sql" scheme="https://lmxy1990.github.io/categories/mysql-sql/"/>
    
    
  </entry>
  
  <entry>
    <title>jarsigner 签名</title>
    <link href="https://lmxy1990.github.io/2017/03/31/jarsigner-%E7%AD%BE%E5%90%8D/"/>
    <id>https://lmxy1990.github.io/2017/03/31/jarsigner-签名/</id>
    <published>2017-03-31T08:52:40.000Z</published>
    <updated>2017-03-31T09:30:22.289Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h3><ul>
<li>要生成密钥(私钥/公钥/证书) 需要有相应的密钥库.而证书是保存公钥的一些信息.</li>
</ul>
<h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><ol>
<li><p>生成密钥库<br><code>keytool -genkey -alias serverkey -keystore keyserver.keystore</code><br><code>jarsigner -genkey -alias serverkey -keystore keyserver.keystore</code></p>
</li>
<li><p>导出证书<br><code>keytool -export -alias serverkey -keystore keyserver.keystore -file server.crt</code><br><code>jarsigner -export -alias serverkey -keystore keyserver.keystore -file server.crt</code></p>
</li>
</ol>
<p>3.密钥库信任指定的证书<br><code>keytool -import -alias serverkey -file server.crt -keystore tclient.keystore tclient.keystore</code><br><code>jarsigner -import -alias serverkey -file server.crt -keystore tclient.keystore tclient.keystore</code></p>
<p>4.签名app<br><code>jarsigner -verbose -keystore reaper.keystore -signedjar test_signed.apk test_unsign.apk reaper</code><br>-verbose：输出详细信息<br>-keystore：密钥库位置<br>-signedjar：后面跟了3个参数：签名成功的apk的名字，等待签名的apk，生成签名的文件名</p>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ul>
<li>密钥库相对于保存密钥的数据库.证书相当于公钥以及一些信息.证书一般式由机构来颁发.这样,客户端解析时候.会显示可信网站.当然,服务器之间的通信可能是双方相互制作传递给对方.</li>
<li>公钥用于客户端加密数据,揭秘需要私钥.公钥是不能用于解密的.非对称摘要算法.如果是对称摘要算法.那就是只有私钥.这样不是很安全.因为客户端可能会泄露.</li>
</ul>
<hr>
<h2 id="End"><a href="#End" class="headerlink" title="End"></a><center>End</center></h2>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;要生成密钥(私钥/公钥/证书) 需要有相应的密钥库.而证书是保存公钥的一些信息.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;命令&quot;&gt;
    
    </summary>
    
      <category term="签名 jarsigner" scheme="https://lmxy1990.github.io/categories/%E7%AD%BE%E5%90%8D-jarsigner/"/>
    
    
  </entry>
  
  <entry>
    <title>HTTPS 认证模型 </title>
    <link href="https://lmxy1990.github.io/2017/03/31/HTTPS-%E8%AE%A4%E8%AF%81%E6%A8%A1%E5%9E%8B/"/>
    <id>https://lmxy1990.github.io/2017/03/31/HTTPS-认证模型/</id>
    <published>2017-03-31T08:51:06.000Z</published>
    <updated>2017-03-31T08:56:51.492Z</updated>
    
    <content type="html"><![CDATA[<h3 id="协议模型"><a href="#协议模型" class="headerlink" title="协议模型:"></a>协议模型:</h3><ol>
<li>第一步(客户端/服务器的证书,随机数,算法,协议交换):<ul>
<li>客户端产生随机数RNC</li>
<li>客户端发送客户端的证书,协议(SSL/TLS),算法信息,RNC给服务器.</li>
<li>服务断接收到请求,产生服务端的随机数RNS</li>
<li>服务端回复服务器的证书,协议(SSL/TLS),算法信息,RNS给客户.</li>
</ul>
</li>
<li>第二步(客户端/服务器向认证机构校验证书信息):<ul>
<li>客户端向第三方/本地信任库认证接收到的服务器证书信息.</li>
<li>服务器断向第三方/本地信任库校验客户端的证书信息</li>
</ul>
</li>
<li>第三步(生成主密钥 Primary Master Secret):<ul>
<li>客户端产生随机数PMS.</li>
<li>客户端根据协议(SSL/TLS),服务器的证书公钥生成加密过的PMS.</li>
<li>客户端向服务器发送加密过的PMS.</li>
<li>服务器与接收加密过的PMS,并根据服务器的证书私钥解密出PMS.</li>
<li>客户端与服务端保存公共私钥(RNC+RNS+PMS)作为共同的私钥.</li>
</ul>
</li>
<li>第四步(会话密钥确认):<ul>
<li>客户端通过PMS产生会话密钥.</li>
<li>客户端数据使用会话密钥加密发送给服务器.</li>
<li>服务器使用PMS产生对应的密钥.</li>
<li>服务使用会话密钥解密接收到的数据.</li>
<li>服务器发送确认信息给客户端.</li>
<li>终止握手.</li>
</ul>
</li>
<li>第五步(正式会话):<ul>
<li>客户端数据使用会话密钥加密 发送给服务端.</li>
<li>服务端接收数据使用相同的会话密钥解密出数据.</li>
<li>服务器使用会话密钥加密数据发送给客户端</li>
<li>客户端使用会话密钥解密出对应数据.</li>
</ul>
</li>
</ol>
<p><span style="color =red">只要这5步中有一步校验异常,都会重新握手.</span></p>
<hr>
<h2 id="End"><a href="#End" class="headerlink" title="End"></a><center>End</center></h2>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;协议模型&quot;&gt;&lt;a href=&quot;#协议模型&quot; class=&quot;headerlink&quot; title=&quot;协议模型:&quot;&gt;&lt;/a&gt;协议模型:&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;第一步(客户端/服务器的证书,随机数,算法,协议交换):&lt;ul&gt;
&lt;li&gt;客户端产生随机数RNC&lt;/li&gt;

    
    </summary>
    
      <category term="Https" scheme="https://lmxy1990.github.io/categories/Https/"/>
    
    
  </entry>
  
  <entry>
    <title>字符编码解码以及内存储存</title>
    <link href="https://lmxy1990.github.io/2017/03/27/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E8%A7%A3%E7%A0%81%E4%BB%A5%E5%8F%8A%E5%86%85%E5%AD%98%E5%82%A8%E5%AD%98/"/>
    <id>https://lmxy1990.github.io/2017/03/27/字符编码解码以及内存储存/</id>
    <published>2017-03-27T06:57:58.000Z</published>
    <updated>2017-03-27T07:14:09.022Z</updated>
    
    <content type="html"><![CDATA[<h3 id="编码-encode"><a href="#编码-encode" class="headerlink" title="编码(encode)"></a>编码(encode)</h3><p>因为计算机只能处理数字，如果要处理文本，就必须先把文本转换为数字才能处理,将字符–&gt;数字 称之为编码.反之为解码.</p>
<p>ASCII : 美国指定的编码标准.只有大小写字母/数字/部分符号(字符占1个字节,不支持中文)</p>
<p>GB2312 : 国标 (所有字符占两个字节)</p>
<p>UNICODE : 国际通用标准.(所有字符占两个字节)</p>
<p>UTF-8 : 国际通用标准的缩小版(字母只占一个字节)</p>
<h3 id="解码-decode"><a href="#解码-decode" class="headerlink" title="解码(decode)"></a>解码(decode)</h3><p>将编码的数字,还原成对相应的字符数组.称之为解码.</p>
<h3 id="python中"><a href="#python中" class="headerlink" title="python中"></a>python中</h3><p>ord(‘’) ; 将字符串解析为编码之后的数字</p>
<p>chr() ; 将数字解析为对应的字符</p>
<hr>
<h2 id="End"><a href="#End" class="headerlink" title="End"></a><center>End</center></h2>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;编码-encode&quot;&gt;&lt;a href=&quot;#编码-encode&quot; class=&quot;headerlink&quot; title=&quot;编码(encode)&quot;&gt;&lt;/a&gt;编码(encode)&lt;/h3&gt;&lt;p&gt;因为计算机只能处理数字，如果要处理文本，就必须先把文本转换为数字才能处理,将字符
    
    </summary>
    
      <category term="字符串" scheme="https://lmxy1990.github.io/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    
  </entry>
  
  <entry>
    <title>Java Excel POI 使用</title>
    <link href="https://lmxy1990.github.io/2017/03/24/Java-Excel-POI-%E4%BD%BF%E7%94%A8/"/>
    <id>https://lmxy1990.github.io/2017/03/24/Java-Excel-POI-使用/</id>
    <published>2017-03-24T06:49:07.000Z</published>
    <updated>2017-03-27T03:04:58.861Z</updated>
    
    <content type="html"><![CDATA[<h3 id="依赖的jar"><a href="#依赖的jar" class="headerlink" title="依赖的jar"></a>依赖的jar</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;!-- https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml --&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;poi-ooxml&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;3.15&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;poi&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;3.15&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;!-- https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml-schemas --&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">   &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;</div><div class="line">   &lt;artifactId&gt;poi-ooxml-schemas&lt;/artifactId&gt;</div><div class="line">   &lt;version&gt;3.15&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<h3 id="对应的操作对象简介"><a href="#对应的操作对象简介" class="headerlink" title="对应的操作对象简介"></a>对应的操作对象简介</h3><p>1.HSSFWorkbook 读取/写入.xls文件</p>
<p>2.XSSFWorkbook 读写 .xlsx文件</p>
<p>3.SXSSFWorkbook 读取/写入.xls 与.xlsx</p>
<h3 id="简要使用"><a href="#简要使用" class="headerlink" title="简要使用"></a>简要使用</h3><p>1.读取操作顺序:<br>    1&gt;  将需要读取的文件/流 传入,产生对应的Workbook对象.<br>    2&gt;  取出每个sheet.根据行列数遍历取值<br>2.写入操作顺序:<br>    1&gt;  使用new Workbook()产生新的工作薄对象.<br>    2&gt;  创建相应的sheet并插入数据.<br>    3&gt;  使用workbook.writ(流)的方法,写出数据.<br>    4&gt;  关闭流,关闭workbook.</p>
<h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><p>1.HSSFWorkbook 写入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div></pre></td><td class="code"><pre><div class="line">// create a new file</div><div class="line">FileOutputStream out = new FileOutputStream(&quot;workbook.xls&quot;);</div><div class="line">// create a new workbook</div><div class="line">Workbook wb = new HSSFWorkbook();</div><div class="line">// create a new sheet</div><div class="line">Sheet s = wb.createSheet();</div><div class="line">// declare a row object reference</div><div class="line">Row r = null;</div><div class="line">// declare a cell object reference</div><div class="line">Cell c = null;</div><div class="line">// create 3 cell styles</div><div class="line">CellStyle cs = wb.createCellStyle();</div><div class="line">CellStyle cs2 = wb.createCellStyle();</div><div class="line">CellStyle cs3 = wb.createCellStyle();</div><div class="line">DataFormat df = wb.createDataFormat();</div><div class="line">// create 2 fonts objects</div><div class="line">Font f = wb.createFont();</div><div class="line">Font f2 = wb.createFont();</div><div class="line"></div><div class="line">//set font 1 to 12 point type</div><div class="line">f.setFontHeightInPoints((short) 12);</div><div class="line">//make it blue</div><div class="line">f.setColor( (short)0xc );</div><div class="line">// make it bold</div><div class="line">//arial is the default font</div><div class="line">f.setBoldweight(Font.BOLDWEIGHT_BOLD);</div><div class="line"></div><div class="line">//set font 2 to 10 point type</div><div class="line">f2.setFontHeightInPoints((short) 10);</div><div class="line">//make it red</div><div class="line">f2.setColor( (short)Font.COLOR_RED );</div><div class="line">//make it bold</div><div class="line">f2.setBoldweight(Font.BOLDWEIGHT_BOLD);</div><div class="line"></div><div class="line">f2.setStrikeout( true );</div><div class="line"></div><div class="line">//set cell stlye</div><div class="line">cs.setFont(f);</div><div class="line">//set the cell format </div><div class="line">cs.setDataFormat(df.getFormat(&quot;#,##0.0&quot;));</div><div class="line"></div><div class="line">//set a thin border</div><div class="line">cs2.setBorderBottom(cs2.BORDER_THIN);</div><div class="line">//fill w fg fill color</div><div class="line">cs2.setFillPattern((short) CellStyle.SOLID_FOREGROUND);</div><div class="line">//set the cell format to text see DataFormat for a full list</div><div class="line">cs2.setDataFormat(HSSFDataFormat.getBuiltinFormat(&quot;text&quot;));</div><div class="line"></div><div class="line">// set the font</div><div class="line">cs2.setFont(f2);</div><div class="line"></div><div class="line">// set the sheet name in Unicode</div><div class="line">wb.setSheetName(0, &quot;\u0422\u0435\u0441\u0442\u043E\u0432\u0430\u044F &quot; + </div><div class="line">                   &quot;\u0421\u0442\u0440\u0430\u043D\u0438\u0447\u043A\u0430&quot; );</div><div class="line">// in case of plain ascii</div><div class="line">// wb.setSheetName(0, &quot;HSSF Test&quot;);</div><div class="line">// create a sheet with 30 rows (0-29)</div><div class="line">int rownum;</div><div class="line">for (rownum = (short) 0; rownum &lt; 30; rownum++)</div><div class="line">&#123;</div><div class="line">    // create a row</div><div class="line">    r = s.createRow(rownum);</div><div class="line">    // on every other row</div><div class="line">    if ((rownum % 2) == 0)</div><div class="line">    &#123;</div><div class="line">        // make the row height bigger  (in twips - 1/20 of a point)</div><div class="line">        r.setHeight((short) 0x249);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //r.setRowNum(( short ) rownum);</div><div class="line">    // create 10 cells (0-9) (the += 2 becomes apparent later</div><div class="line">    for (short cellnum = (short) 0; cellnum &lt; 10; cellnum += 2)</div><div class="line">    &#123;</div><div class="line">        // create a numeric cell</div><div class="line">        c = r.createCell(cellnum);</div><div class="line">        // do some goofy math to demonstrate decimals</div><div class="line">        c.setCellValue(rownum * 10000 + cellnum</div><div class="line">                + (((double) rownum / 1000)</div><div class="line">                + ((double) cellnum / 10000)));</div><div class="line"></div><div class="line">        String cellValue;</div><div class="line"></div><div class="line">        // create a string cell (see why += 2 in the</div><div class="line">        c = r.createCell((short) (cellnum + 1));</div><div class="line">        </div><div class="line">        // on every other row</div><div class="line">        if ((rownum % 2) == 0)</div><div class="line">        &#123;</div><div class="line">            // set this cell to the first cell style we defined</div><div class="line">            c.setCellStyle(cs);</div><div class="line">            // set the cell&apos;s string value to &quot;Test&quot;</div><div class="line">            c.setCellValue( &quot;Test&quot; );</div><div class="line">        &#125;</div><div class="line">        else</div><div class="line">        &#123;</div><div class="line">            c.setCellStyle(cs2);</div><div class="line">            // set the cell&apos;s string value to &quot;\u0422\u0435\u0441\u0442&quot;</div><div class="line">            c.setCellValue( &quot;\u0422\u0435\u0441\u0442&quot; );</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        // make this column a bit wider</div><div class="line">        s.setColumnWidth((short) (cellnum + 1), (short) ((50 * 8) / ((double) 1 / 20)));</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//draw a thick black border on the row at the bottom using BLANKS</div><div class="line">// advance 2 rows</div><div class="line">rownum++;</div><div class="line">rownum++;</div><div class="line"></div><div class="line">r = s.createRow(rownum);</div><div class="line"></div><div class="line">// define the third style to be the default</div><div class="line">// except with a thick black border at the bottom</div><div class="line">cs3.setBorderBottom(cs3.BORDER_THICK);</div><div class="line"></div><div class="line">//create 50 cells</div><div class="line">for (short cellnum = (short) 0; cellnum &lt; 50; cellnum++)</div><div class="line">&#123;</div><div class="line">    //create a blank type cell (no value)</div><div class="line">    c = r.createCell(cellnum);</div><div class="line">    // set it to the thick black border style</div><div class="line">    c.setCellStyle(cs3);</div><div class="line">&#125;</div><div class="line"></div><div class="line">//end draw thick black border</div><div class="line"></div><div class="line"></div><div class="line">// demonstrate adding/naming and deleting a sheet</div><div class="line">// create a sheet, set its title then delete it</div><div class="line">s = wb.createSheet();</div><div class="line">wb.setSheetName(1, &quot;DeletedSheet&quot;);</div><div class="line">wb.removeSheetAt(1);</div><div class="line">//end deleted sheet</div><div class="line"></div><div class="line">// write the workbook to the output stream</div><div class="line">// close our file (don&apos;t blow out our file handles</div><div class="line">wb.write(out);</div><div class="line">out.close();</div></pre></td></tr></table></figure></p>
<p>2.HSSFWorkbook读取/修改.xls<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div></pre></td><td class="code"><pre><div class="line">package org.apache.poi.hssf.usermodel.examples;</div><div class="line"></div><div class="line">import java.io.FileInputStream;</div><div class="line">import java.io.FileOutputStream;</div><div class="line">import java.io.IOException;</div><div class="line">import java.util.Locale;</div><div class="line"></div><div class="line">import org.apache.poi.hssf.usermodel.HSSFCell;</div><div class="line">import org.apache.poi.hssf.usermodel.HSSFCellStyle;</div><div class="line">import org.apache.poi.hssf.usermodel.HSSFDataFormat;</div><div class="line">import org.apache.poi.hssf.usermodel.HSSFFont;</div><div class="line">import org.apache.poi.hssf.usermodel.HSSFRichTextString;</div><div class="line">import org.apache.poi.hssf.usermodel.HSSFRow;</div><div class="line">import org.apache.poi.hssf.usermodel.HSSFSheet;</div><div class="line">import org.apache.poi.hssf.usermodel.HSSFWorkbook;</div><div class="line">import org.apache.poi.ss.usermodel.BorderStyle;</div><div class="line">import org.apache.poi.ss.usermodel.FillPatternType;</div><div class="line">import org.apache.poi.ss.util.CellRangeAddress;</div><div class="line"></div><div class="line">/**</div><div class="line"> * File for HSSF testing/examples</div><div class="line"> *</div><div class="line"> * THIS IS NOT THE MAIN HSSF FILE!! This is a utility for testing functionality.</div><div class="line"> * It does contain sample API usage that may be educational to regular API</div><div class="line"> * users.</div><div class="line"> */</div><div class="line">public final class HSSFReadWrite &#123;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * creates an &#123;@link HSSFWorkbook&#125; with the specified OS filename.</div><div class="line">     */</div><div class="line">    private static HSSFWorkbook readFile(String filename) throws IOException &#123;</div><div class="line">        FileInputStream fis = new FileInputStream(filename);</div><div class="line">        try &#123;</div><div class="line">            return new HSSFWorkbook(fis);       // NOSONAR - should not be closed here</div><div class="line">        &#125; finally &#123;</div><div class="line">            fis.close();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * given a filename this outputs a sample sheet with just a set of</div><div class="line">     * rows/cells.</div><div class="line">     */</div><div class="line">    private static void testCreateSampleSheet(String outputFilename) throws IOException &#123;</div><div class="line">        HSSFWorkbook wb = new HSSFWorkbook();</div><div class="line">        try &#123;</div><div class="line">            HSSFSheet s = wb.createSheet();</div><div class="line">            HSSFCellStyle cs = wb.createCellStyle();</div><div class="line">            HSSFCellStyle cs2 = wb.createCellStyle();</div><div class="line">            HSSFCellStyle cs3 = wb.createCellStyle();</div><div class="line">            HSSFFont f = wb.createFont();</div><div class="line">            HSSFFont f2 = wb.createFont();</div><div class="line"></div><div class="line">            f.setFontHeightInPoints((short) 12);</div><div class="line">            f.setColor((short) 0xA);</div><div class="line">            f.setBold(true);</div><div class="line">            f2.setFontHeightInPoints((short) 10);</div><div class="line">            f2.setColor((short) 0xf);</div><div class="line">            f2.setBold(true);</div><div class="line">            cs.setFont(f);</div><div class="line">            cs.setDataFormat(HSSFDataFormat.getBuiltinFormat(&quot;($#,##0_);[Red]($#,##0)&quot;));</div><div class="line">            cs2.setBorderBottom(BorderStyle.THIN);</div><div class="line">            cs2.setFillPattern(FillPatternType.SOLID_FOREGROUND);</div><div class="line">            cs2.setFillForegroundColor((short) 0xA);</div><div class="line">            cs2.setFont(f2);</div><div class="line">            wb.setSheetName(0, &quot;HSSF Test&quot;);</div><div class="line">            int rownum;</div><div class="line">            for (rownum = 0; rownum &lt; 300; rownum++) &#123;</div><div class="line">                HSSFRow r = s.createRow(rownum);</div><div class="line">                if ((rownum % 2) == 0) &#123;</div><div class="line">                    r.setHeight((short) 0x249);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                for (int cellnum = 0; cellnum &lt; 50; cellnum += 2) &#123;</div><div class="line">                    HSSFCell c = r.createCell(cellnum);</div><div class="line">                    c.setCellValue(rownum * 10000 + cellnum</div><div class="line">                            + (((double) rownum / 1000) + ((double) cellnum / 10000)));</div><div class="line">                    if ((rownum % 2) == 0) &#123;</div><div class="line">                        c.setCellStyle(cs);</div><div class="line">                    &#125;</div><div class="line">                    c = r.createCell(cellnum + 1);</div><div class="line">                    c.setCellValue(new HSSFRichTextString(&quot;TEST&quot;));</div><div class="line">                    // 50 characters divided by 1/20th of a point</div><div class="line">                    s.setColumnWidth(cellnum + 1, (int) (50 * 8 / 0.05));</div><div class="line">                    if ((rownum % 2) == 0) &#123;</div><div class="line">                        c.setCellStyle(cs2);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            // draw a thick black border on the row at the bottom using BLANKS</div><div class="line">            rownum++;</div><div class="line">            rownum++;</div><div class="line">            HSSFRow r = s.createRow(rownum);</div><div class="line">            cs3.setBorderBottom(BorderStyle.THICK);</div><div class="line">            for (int cellnum = 0; cellnum &lt; 50; cellnum++) &#123;</div><div class="line">                HSSFCell c = r.createCell(cellnum);</div><div class="line">                c.setCellStyle(cs3);</div><div class="line">            &#125;</div><div class="line">            s.addMergedRegion(new CellRangeAddress(0, 3, 0, 3));</div><div class="line">            s.addMergedRegion(new CellRangeAddress(100, 110, 100, 110));</div><div class="line"></div><div class="line">            // end draw thick black border</div><div class="line">            // create a sheet, set its title then delete it</div><div class="line">            wb.createSheet();</div><div class="line">            wb.setSheetName(1, &quot;DeletedSheet&quot;);</div><div class="line">            wb.removeSheetAt(1);</div><div class="line"></div><div class="line">            // end deleted sheet</div><div class="line">            FileOutputStream out = new FileOutputStream(outputFilename);</div><div class="line">            try &#123;</div><div class="line">                wb.write(out);</div><div class="line">            &#125; finally &#123;</div><div class="line">                out.close();</div><div class="line">            &#125;</div><div class="line">        &#125; finally &#123;</div><div class="line">            wb.close();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Method main</div><div class="line">     *</div><div class="line">     * Given 1 argument takes that as the filename, inputs it and dumps the</div><div class="line">     * cell values/types out to sys.out.&lt;br/&gt;</div><div class="line">     *</div><div class="line">     * given 2 arguments where the second argument is the word &quot;write&quot; and the</div><div class="line">     * first is the filename - writes out a sample (test) spreadsheet</div><div class="line">     * see &#123;@link HSSFReadWrite#testCreateSampleSheet(String)&#125;.&lt;br/&gt;</div><div class="line">     *</div><div class="line">     * given 2 arguments where the first is an input filename and the second</div><div class="line">     * an output filename (not write), attempts to fully read in the</div><div class="line">     * spreadsheet and fully write it out.&lt;br/&gt;</div><div class="line">     *</div><div class="line">     * given 3 arguments where the first is an input filename and the second an</div><div class="line">     * output filename (not write) and the third is &quot;modify1&quot;, attempts to read in the</div><div class="line">     * spreadsheet, deletes rows 0-24, 74-99.  Changes cell at row 39, col 3 to</div><div class="line">     * &quot;MODIFIED CELL&quot; then writes it out.  Hence this is &quot;modify test 1&quot;.  If you</div><div class="line">     * take the output from the write test, you&apos;ll have a valid scenario.</div><div class="line">     */</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        if (args.length &lt; 1) &#123;</div><div class="line">            System.err.println(&quot;At least one argument expected&quot;);</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        String fileName = args[0];</div><div class="line">        try &#123;</div><div class="line">            if (args.length &lt; 2) &#123;</div><div class="line"></div><div class="line">                HSSFWorkbook wb = HSSFReadWrite.readFile(fileName);</div><div class="line"></div><div class="line">                try &#123;</div><div class="line">                    System.out.println(&quot;Data dump:\n&quot;);</div><div class="line"></div><div class="line">                    for (int k = 0; k &lt; wb.getNumberOfSheets(); k++) &#123;</div><div class="line">                        HSSFSheet sheet = wb.getSheetAt(k);</div><div class="line">                        int rows = sheet.getPhysicalNumberOfRows();</div><div class="line">                        System.out.println(&quot;Sheet &quot; + k + &quot; \&quot;&quot; + wb.getSheetName(k) + &quot;\&quot; has &quot; + rows</div><div class="line">                                + &quot; row(s).&quot;);</div><div class="line">                        for (int r = 0; r &lt; rows; r++) &#123;</div><div class="line">                            HSSFRow row = sheet.getRow(r);</div><div class="line">                            if (row == null) &#123;</div><div class="line">                                continue;</div><div class="line">                            &#125;</div><div class="line"></div><div class="line">                            System.out.println(&quot;\nROW &quot; + row.getRowNum() + &quot; has &quot; + row.getPhysicalNumberOfCells() + &quot; cell(s).&quot;);</div><div class="line">                            for (int c = 0; c &lt; row.getLastCellNum(); c++) &#123;</div><div class="line">                                HSSFCell cell = row.getCell(c);</div><div class="line">                                String value;</div><div class="line"></div><div class="line">                                if(cell != null) &#123;</div><div class="line">                                    switch (cell.getCellTypeEnum()) &#123;</div><div class="line"></div><div class="line">                                        case FORMULA:</div><div class="line">                                            value = &quot;FORMULA value=&quot; + cell.getCellFormula();</div><div class="line">                                            break;</div><div class="line"></div><div class="line">                                        case NUMERIC:</div><div class="line">                                            value = &quot;NUMERIC value=&quot; + cell.getNumericCellValue();</div><div class="line">                                            break;</div><div class="line"></div><div class="line">                                        case STRING:</div><div class="line">                                            value = &quot;STRING value=&quot; + cell.getStringCellValue();</div><div class="line">                                            break;</div><div class="line"></div><div class="line">                                        case BLANK:</div><div class="line">                                            value = &quot;&lt;BLANK&gt;&quot;;</div><div class="line">                                            break;</div><div class="line"></div><div class="line">                                        case BOOLEAN:</div><div class="line">                                            value = &quot;BOOLEAN value-&quot; + cell.getBooleanCellValue();</div><div class="line">                                            break;</div><div class="line"></div><div class="line">                                        case ERROR:</div><div class="line">                                            value = &quot;ERROR value=&quot; + cell.getErrorCellValue();</div><div class="line">                                            break;</div><div class="line"></div><div class="line">                                        default:</div><div class="line">                                            value = &quot;UNKNOWN value of type &quot; + cell.getCellTypeEnum();</div><div class="line">                                    &#125;</div><div class="line">                                    System.out.println(&quot;CELL col=&quot; + cell.getColumnIndex() + &quot; VALUE=&quot;</div><div class="line">                                            + value);</div><div class="line">                                &#125;</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125; finally &#123;</div><div class="line">                    wb.close();</div><div class="line">                &#125;</div><div class="line">            &#125; else if (args.length == 2) &#123;</div><div class="line">                if (args[1].toLowerCase(Locale.ROOT).equals(&quot;write&quot;)) &#123;</div><div class="line">                    System.out.println(&quot;Write mode&quot;);</div><div class="line">                    long time = System.currentTimeMillis();</div><div class="line">                    HSSFReadWrite.testCreateSampleSheet(fileName);</div><div class="line"></div><div class="line">                    System.out.println(&quot;&quot; + (System.currentTimeMillis() - time)</div><div class="line">                            + &quot; ms generation time&quot;);</div><div class="line">                &#125; else &#123;</div><div class="line">                    System.out.println(&quot;readwrite test&quot;);</div><div class="line">                    HSSFWorkbook wb = HSSFReadWrite.readFile(fileName);</div><div class="line">                    try &#123;</div><div class="line">                        FileOutputStream stream = new FileOutputStream(args[1]);</div><div class="line">                        try &#123;</div><div class="line">                            wb.write(stream);</div><div class="line">                        &#125; finally &#123;</div><div class="line">                            stream.close();</div><div class="line">                        &#125;</div><div class="line">                    &#125; finally &#123;</div><div class="line">                        wb.close();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125; else if (args.length == 3 &amp;&amp; args[2].equalsIgnoreCase(&quot;modify1&quot;)) &#123;</div><div class="line">                // delete row 0-24, row 74 - 99 &amp;&amp; change cell 3 on row 39 to string &quot;MODIFIED CELL!!&quot;</div><div class="line"></div><div class="line">                HSSFWorkbook wb = HSSFReadWrite.readFile(fileName);</div><div class="line">                try &#123;</div><div class="line">                    HSSFSheet sheet = wb.getSheetAt(0);</div><div class="line"></div><div class="line">                    for (int k = 0; k &lt; 25; k++) &#123;</div><div class="line">                        HSSFRow row = sheet.getRow(k);</div><div class="line"></div><div class="line">                        sheet.removeRow(row);</div><div class="line">                    &#125;</div><div class="line">                    for (int k = 74; k &lt; 100; k++) &#123;</div><div class="line">                        HSSFRow row = sheet.getRow(k);</div><div class="line"></div><div class="line">                        sheet.removeRow(row);</div><div class="line">                    &#125;</div><div class="line">                    HSSFRow row = sheet.getRow(39);</div><div class="line">                    HSSFCell cell = row.getCell(3);</div><div class="line">                    cell.setCellValue(&quot;MODIFIED CELL!!!!!&quot;);</div><div class="line"></div><div class="line">                    FileOutputStream stream = new FileOutputStream(args[1]);</div><div class="line">                    try &#123;</div><div class="line">                        wb.write(stream);</div><div class="line">                    &#125; finally &#123;</div><div class="line">                        stream.close();</div><div class="line">                    &#125;</div><div class="line">                &#125; finally &#123;</div><div class="line">                    wb.close();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ol>
<li><p>HSSFWorkbook不使用SAX 来解析例子</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * This example shows how to use the event API for reading a file.</div><div class="line"> */</div><div class="line">public class EventExample</div><div class="line">        implements HSSFListener</div><div class="line">&#123;</div><div class="line">    private SSTRecord sstrec;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * This method listens for incoming records and handles them as required.</div><div class="line">     * @param record    The record that was found while reading.</div><div class="line">     */</div><div class="line">    public void processRecord(Record record)</div><div class="line">    &#123;</div><div class="line">        switch (record.getSid())</div><div class="line">        &#123;</div><div class="line">            // the BOFRecord can represent either the beginning of a sheet or the workbook</div><div class="line">            case BOFRecord.sid:</div><div class="line">                BOFRecord bof = (BOFRecord) record;</div><div class="line">                if (bof.getType() == bof.TYPE_WORKBOOK)</div><div class="line">                &#123;</div><div class="line">                    System.out.println(&quot;Encountered workbook&quot;);</div><div class="line">                    // assigned to the class level member</div><div class="line">                &#125; else if (bof.getType() == bof.TYPE_WORKSHEET)</div><div class="line">                &#123;</div><div class="line">                    System.out.println(&quot;Encountered sheet reference&quot;);</div><div class="line">                &#125;</div><div class="line">                break;</div><div class="line">            case BoundSheetRecord.sid:</div><div class="line">                BoundSheetRecord bsr = (BoundSheetRecord) record;</div><div class="line">                System.out.println(&quot;New sheet named: &quot; + bsr.getSheetname());</div><div class="line">                break;</div><div class="line">            case RowRecord.sid:</div><div class="line">                RowRecord rowrec = (RowRecord) record;</div><div class="line">                System.out.println(&quot;Row found, first column at &quot;</div><div class="line">                        + rowrec.getFirstCol() + &quot; last column at &quot; + rowrec.getLastCol());</div><div class="line">                break;</div><div class="line">            case NumberRecord.sid:</div><div class="line">                NumberRecord numrec = (NumberRecord) record;</div><div class="line">                System.out.println(&quot;Cell found with value &quot; + numrec.getValue()</div><div class="line">                        + &quot; at row &quot; + numrec.getRow() + &quot; and column &quot; + numrec.getColumn());</div><div class="line">                break;</div><div class="line">                // SSTRecords store a array of unique strings used in Excel.</div><div class="line">            case SSTRecord.sid:</div><div class="line">                sstrec = (SSTRecord) record;</div><div class="line">                for (int k = 0; k &lt; sstrec.getNumUniqueStrings(); k++)</div><div class="line">                &#123;</div><div class="line">                    System.out.println(&quot;String table value &quot; + k + &quot; = &quot; + sstrec.getString(k));</div><div class="line">                &#125;</div><div class="line">                break;</div><div class="line">            case LabelSSTRecord.sid:</div><div class="line">                LabelSSTRecord lrec = (LabelSSTRecord) record;</div><div class="line">                System.out.println(&quot;String cell found with value &quot;</div><div class="line">                        + sstrec.getString(lrec.getSSTIndex()));</div><div class="line">                break;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Read an excel file and spit out what we find.</div><div class="line">     *</div><div class="line">     * @param args      Expect one argument that is the file to read.</div><div class="line">     * @throws IOException  When there is an error processing the file.</div><div class="line">     */</div><div class="line">    public static void main(String[] args) throws IOException</div><div class="line">    &#123;</div><div class="line">        // create a new file input stream with the input file specified</div><div class="line">        // at the command line</div><div class="line">        FileInputStream fin = new FileInputStream(args[0]);</div><div class="line">        // create a new org.apache.poi.poifs.filesystem.Filesystem</div><div class="line">        POIFSFileSystem poifs = new POIFSFileSystem(fin);</div><div class="line">        // get the Workbook (excel part) stream in a InputStream</div><div class="line">        InputStream din = poifs.createDocumentInputStream(&quot;Workbook&quot;);</div><div class="line">        // construct out HSSFRequest object</div><div class="line">        HSSFRequest req = new HSSFRequest();</div><div class="line">        // lazy listen for ALL records with the listener shown above</div><div class="line">        req.addListenerForAllRecords(new EventExample());</div><div class="line">        // create our event factory</div><div class="line">        HSSFEventFactory factory = new HSSFEventFactory();</div><div class="line">        // process our events based on the document input stream</div><div class="line">        factory.processEvents(req, din);</div><div class="line">        // once all the events are processed close our file input stream</div><div class="line">        fin.close();</div><div class="line">        // and our document input stream (don&apos;t want to leak these!)</div><div class="line">        din.close();</div><div class="line">        System.out.println(&quot;done.&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>XSSFWorkbook使用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div></pre></td><td class="code"><pre><div class="line">import java.io.InputStream;</div><div class="line">import java.util.Iterator;</div><div class="line"></div><div class="line">import org.apache.poi.xssf.eventusermodel.XSSFReader;</div><div class="line">import org.apache.poi.xssf.model.SharedStringsTable;</div><div class="line">import org.apache.poi.openxml4j.opc.OPCPackage;</div><div class="line">import org.xml.sax.Attributes;</div><div class="line">import org.xml.sax.ContentHandler;</div><div class="line">import org.xml.sax.InputSource;</div><div class="line">import org.xml.sax.SAXException;</div><div class="line">import org.xml.sax.XMLReader;</div><div class="line">import org.xml.sax.helpers.DefaultHandler;</div><div class="line">import org.xml.sax.helpers.XMLReaderFactory;</div><div class="line"></div><div class="line">public class ExampleEventUserModel &#123;</div><div class="line">    public void processOneSheet(String filename) throws Exception &#123;</div><div class="line">        OPCPackage pkg = OPCPackage.open(filename);</div><div class="line">        XSSFReader r = new XSSFReader( pkg );</div><div class="line">        SharedStringsTable sst = r.getSharedStringsTable();</div><div class="line"></div><div class="line">        XMLReader parser = fetchSheetParser(sst);</div><div class="line"></div><div class="line">        // To look up the Sheet Name / Sheet Order / rID,</div><div class="line">        //  you need to process the core Workbook stream.</div><div class="line">        // Normally it&apos;s of the form rId# or rSheet#</div><div class="line">        InputStream sheet2 = r.getSheet(&quot;rId2&quot;);</div><div class="line">        InputSource sheetSource = new InputSource(sheet2);</div><div class="line">        parser.parse(sheetSource);</div><div class="line">        sheet2.close();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void processAllSheets(String filename) throws Exception &#123;</div><div class="line">        OPCPackage pkg = OPCPackage.open(filename);</div><div class="line">        XSSFReader r = new XSSFReader( pkg );</div><div class="line">        SharedStringsTable sst = r.getSharedStringsTable();</div><div class="line">        </div><div class="line">        XMLReader parser = fetchSheetParser(sst);</div><div class="line"></div><div class="line">        Iterator&lt;InputStream&gt; sheets = r.getSheetsData();</div><div class="line">        while(sheets.hasNext()) &#123;</div><div class="line">            System.out.println(&quot;Processing new sheet:\n&quot;);</div><div class="line">            InputStream sheet = sheets.next();</div><div class="line">            InputSource sheetSource = new InputSource(sheet);</div><div class="line">            parser.parse(sheetSource);</div><div class="line">            sheet.close();</div><div class="line">            System.out.println(&quot;&quot;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public XMLReader fetchSheetParser(SharedStringsTable sst) throws SAXException &#123;</div><div class="line">        XMLReader parser =</div><div class="line">            XMLReaderFactory.createXMLReader(</div><div class="line">                    &quot;org.apache.xerces.parsers.SAXParser&quot;</div><div class="line">            );</div><div class="line">        ContentHandler handler = new SheetHandler(sst);</div><div class="line">        parser.setContentHandler(handler);</div><div class="line">        return parser;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /** </div><div class="line">     * See org.xml.sax.helpers.DefaultHandler javadocs </div><div class="line">     */</div><div class="line">    private static class SheetHandler extends DefaultHandler &#123;</div><div class="line">        private SharedStringsTable sst;</div><div class="line">        private String lastContents;</div><div class="line">        private boolean nextIsString;</div><div class="line">        </div><div class="line">        private SheetHandler(SharedStringsTable sst) &#123;</div><div class="line">            this.sst = sst;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        public void startElement(String uri, String localName, String name,</div><div class="line">                Attributes attributes) throws SAXException &#123;</div><div class="line">            // c =&gt; cell</div><div class="line">            if(name.equals(&quot;c&quot;)) &#123;</div><div class="line">                // Print the cell reference</div><div class="line">                System.out.print(attributes.getValue(&quot;r&quot;) + &quot; - &quot;);</div><div class="line">                // Figure out if the value is an index in the SST</div><div class="line">                String cellType = attributes.getValue(&quot;t&quot;);</div><div class="line">                if(cellType != null &amp;&amp; cellType.equals(&quot;s&quot;)) &#123;</div><div class="line">                    nextIsString = true;</div><div class="line">                &#125; else &#123;</div><div class="line">                    nextIsString = false;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            // Clear contents cache</div><div class="line">            lastContents = &quot;&quot;;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        public void endElement(String uri, String localName, String name)</div><div class="line">                throws SAXException &#123;</div><div class="line">            // Process the last contents as required.</div><div class="line">            // Do now, as characters() may be called more than once</div><div class="line">            if(nextIsString) &#123;</div><div class="line">                int idx = Integer.parseInt(lastContents);</div><div class="line">                lastContents = new XSSFRichTextString(sst.getEntryAt(idx)).toString();</div><div class="line">                nextIsString = false;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            // v =&gt; contents of a cell</div><div class="line">            // Output after we&apos;ve seen the string contents</div><div class="line">            if(name.equals(&quot;v&quot;)) &#123;</div><div class="line">                System.out.println(lastContents);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public void characters(char[] ch, int start, int length)</div><div class="line">                throws SAXException &#123;</div><div class="line">            lastContents += new String(ch, start, length);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public static void main(String[] args) throws Exception &#123;</div><div class="line">        ExampleEventUserModel example = new ExampleEventUserModel();</div><div class="line">        example.processOneSheet(args[0]);</div><div class="line">        example.processAllSheets(args[0]);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>5.SXSSFWorkbook 使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line">import junit.framework.Assert;</div><div class="line">import org.apache.poi.ss.usermodel.Cell;</div><div class="line">import org.apache.poi.ss.usermodel.Row;</div><div class="line">import org.apache.poi.ss.usermodel.Sheet;</div><div class="line">import org.apache.poi.ss.usermodel.Workbook;</div><div class="line">import org.apache.poi.ss.util.CellReference;</div><div class="line">import org.apache.poi.xssf.streaming.SXSSFWorkbook;</div><div class="line"></div><div class="line">    public static void main(String[] args) throws Throwable &#123;</div><div class="line">        SXSSFWorkbook wb = new SXSSFWorkbook(100); // keep 100 rows in memory, exceeding rows will be flushed to disk</div><div class="line">        Sheet sh = wb.createSheet();</div><div class="line">        for(int rownum = 0; rownum &lt; 1000; rownum++)&#123;</div><div class="line">            Row row = sh.createRow(rownum);</div><div class="line">            for(int cellnum = 0; cellnum &lt; 10; cellnum++)&#123;</div><div class="line">                Cell cell = row.createCell(cellnum);</div><div class="line">                String address = new CellReference(cell).formatAsString();</div><div class="line">                cell.setCellValue(address);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // Rows with rownum &lt; 900 are flushed and not accessible</div><div class="line">        for(int rownum = 0; rownum &lt; 900; rownum++)&#123;</div><div class="line">          Assert.assertNull(sh.getRow(rownum));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // ther last 100 rows are still in memory</div><div class="line">        for(int rownum = 900; rownum &lt; 1000; rownum++)&#123;</div><div class="line">            Assert.assertNotNull(sh.getRow(rownum));</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        FileOutputStream out = new FileOutputStream(&quot;/temp/sxssf.xlsx&quot;);</div><div class="line">        wb.write(out);</div><div class="line">        out.close();</div><div class="line"></div><div class="line">        // dispose of temporary files backing this workbook on disk</div><div class="line">        wb.dispose();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">The next example turns off auto-flushing (windowSize=-1) and the code manually controls how portions of data are written to disk</div><div class="line"></div><div class="line"></div><div class="line">import org.apache.poi.ss.usermodel.Cell;</div><div class="line">import org.apache.poi.ss.usermodel.Row;</div><div class="line">import org.apache.poi.ss.usermodel.Sheet;</div><div class="line">import org.apache.poi.ss.usermodel.Workbook;</div><div class="line">import org.apache.poi.ss.util.CellReference;</div><div class="line">import org.apache.poi.xssf.streaming.SXSSFWorkbook;</div><div class="line"></div><div class="line">    public static void main(String[] args) throws Throwable &#123;</div><div class="line">        SXSSFWorkbook wb = new SXSSFWorkbook(-1); // turn off auto-flushing and accumulate all rows in memory</div><div class="line">        Sheet sh = wb.createSheet();</div><div class="line">        for(int rownum = 0; rownum &lt; 1000; rownum++)&#123;</div><div class="line">            Row row = sh.createRow(rownum);</div><div class="line">            for(int cellnum = 0; cellnum &lt; 10; cellnum++)&#123;</div><div class="line">                Cell cell = row.createCell(cellnum);</div><div class="line">                String address = new CellReference(cell).formatAsString();</div><div class="line">                cell.setCellValue(address);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">           // manually control how rows are flushed to disk </div><div class="line">           if(rownum % 100 == 0) &#123;</div><div class="line">                ((SXSSFSheet)sh).flushRows(100); // retain 100 last rows and flush all others</div><div class="line"></div><div class="line">                // ((SXSSFSheet)sh).flushRows() is a shortcut for ((SXSSFSheet)sh).flushRows(0),</div><div class="line">                // this method flushes all rows</div><div class="line">           &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        FileOutputStream out = new FileOutputStream(&quot;/temp/sxssf.xlsx&quot;);</div><div class="line">        wb.write(out);</div><div class="line">        out.close();</div><div class="line"></div><div class="line">        // dispose of temporary files backing this workbook on disk</div><div class="line">        wb.dispose();</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="End"><a href="#End" class="headerlink" title="End"></a><center>End</center></h2>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;依赖的jar&quot;&gt;&lt;a href=&quot;#依赖的jar&quot; class=&quot;headerlink&quot; title=&quot;依赖的jar&quot;&gt;&lt;/a&gt;依赖的jar&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
    
    </summary>
    
      <category term="POI Excel" scheme="https://lmxy1990.github.io/categories/POI-Excel/"/>
    
    
  </entry>
  
  <entry>
    <title>关于Sprintg注解与配置文件产生的bean</title>
    <link href="https://lmxy1990.github.io/2017/03/22/%E5%85%B3%E4%BA%8ESprintg%E6%B3%A8%E8%A7%A3%E4%B8%8E%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%BA%A7%E7%94%9F%E7%9A%84bean/"/>
    <id>https://lmxy1990.github.io/2017/03/22/关于Sprintg注解与配置文件产生的bean/</id>
    <published>2017-03-22T02:24:03.000Z</published>
    <updated>2017-03-22T02:30:28.177Z</updated>
    
    <content type="html"><![CDATA[<h3 id="bean-的创建有XML与注解"><a href="#bean-的创建有XML与注解" class="headerlink" title="bean 的创建有XML与注解"></a>bean 的创建有XML与注解</h3><p>最近忘了这坑壁事情了.如果是配置生成的bean.里面的对象又是用注解注入的话.必须用扫描.</p>
<p>不然只有配置该bean的时候,去手动配置该bean.</p>
<p>之前遇到过,忘记了.现在又遇到了.搞了一天…郁闷.</p>
<hr>
<h2 id="End"><a href="#End" class="headerlink" title="End"></a><center>End</center></h2>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;bean-的创建有XML与注解&quot;&gt;&lt;a href=&quot;#bean-的创建有XML与注解&quot; class=&quot;headerlink&quot; title=&quot;bean 的创建有XML与注解&quot;&gt;&lt;/a&gt;bean 的创建有XML与注解&lt;/h3&gt;&lt;p&gt;最近忘了这坑壁事情了.如果是配置生成
    
    </summary>
    
      <category term="spring bean" scheme="https://lmxy1990.github.io/categories/spring-bean/"/>
    
    
  </entry>
  
  <entry>
    <title>定时任务调度</title>
    <link href="https://lmxy1990.github.io/2017/03/16/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6/"/>
    <id>https://lmxy1990.github.io/2017/03/16/定时任务调度/</id>
    <published>2017-03-16T09:01:14.000Z</published>
    <updated>2017-03-16T09:27:52.606Z</updated>
    
    <content type="html"><![CDATA[<h3 id="定时任务使用的方法"><a href="#定时任务使用的方法" class="headerlink" title="定时任务使用的方法"></a>定时任务使用的方法</h3><p>1.最原始的使用java提供的延迟循环队列.<br>2.使用Quartz提供的方法.<br>3.使用spring提供的调度器.</p>
<h3 id="使用循环延迟队列"><a href="#使用循环延迟队列" class="headerlink" title="使用循环延迟队列."></a>使用循环延迟队列.</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ScheduledExecutorService executorService = Executors.newScheduledThreadPool(10);</div><div class="line">//启动延迟,初始化延迟,多久执行一次.</div><div class="line">executorService.scheduleWithFixedDelay(new Runable(), 0, 9, TimeUnit.HOURS);</div></pre></td></tr></table></figure>
<h3 id="使用Quartz调度"><a href="#使用Quartz调度" class="headerlink" title="使用Quartz调度"></a>使用Quartz调度</h3><p>1.引入依赖或者Jar包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;!-- https://mvnrepository.com/artifact/org.quartz-scheduler/quartz --&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.quartz-scheduler&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;quartz&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;2.2.3&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure></p>
<p>2.配置执行参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;!--配置启动的bean,task以及执行的方法--&gt;</div><div class="line">&lt;bean id=&quot;job&quot; class=&quot; xx.xx.xx.Job&quot; /&gt;</div><div class="line">&lt;bean id=&quot;cronTask&quot; class=&quot;org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean&quot;&gt;</div><div class="line">    &lt;property name=&quot;targetObject&quot; ref=&quot;job&quot; /&gt;</div><div class="line">    &lt;property name=&quot;targetMethod&quot; value=&quot;runWork&quot; /&gt;</div><div class="line">    &lt;!-- false表示job不会并发执行，默认为true--&gt;</div><div class="line">    &lt;property name=&quot;concurrent&quot; value=&quot;false&quot; /&gt;</div><div class="line">&lt;/bean&gt;</div></pre></td></tr></table></figure></p>
<p>2.接下来配置触发器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;bean id=&quot;doWork&quot; class=&quot;org.springframework.scheduling.quartz.CronTriggerBean&quot;&gt;</div><div class="line">    &lt;property name=&quot;jobDetail&quot; ref=&quot;cronTask&quot; /&gt;</div><div class="line">    &lt;!—每天凌晨0点1分执行--&gt;</div><div class="line">    &lt;property name=&quot;cronExpression&quot; value=&quot;0 01 00 * * ?&quot; /&gt;</div><div class="line">&lt;/bean&gt;</div></pre></td></tr></table></figure></p>
<p>3.最后配置调度工厂<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;bean class=&quot;org.springframework.scheduling.quartz.SchedulerFactoryBean&quot;&gt;</div><div class="line">    &lt;property name=&quot;triggers&quot;&gt;</div><div class="line">        &lt;list&gt;</div><div class="line">            &lt;!--调度多个任务--&gt;</div><div class="line">            &lt;ref local=&quot;doWork&quot;/&gt;</div><div class="line">        &lt;/list&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">&lt;/bean&gt;</div></pre></td></tr></table></figure></p>
<h3 id="使用spring-task来调度"><a href="#使用spring-task来调度" class="headerlink" title="使用spring task来调度"></a>使用spring task来调度</h3><p>1.添加相应的命名空间<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; </div><div class="line">    ......</div><div class="line">    xmlns:task=&quot;http://www.springframework.org/schema/task&quot;</div><div class="line">        xsi:schemaLocation=&quot;</div><div class="line">        ......</div><div class="line">    http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd&quot;&gt;</div></pre></td></tr></table></figure></p>
<p>2.task 线程池配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;task:executor id=&quot;executor&quot; pool-size=&quot;5&quot; /&gt;</div><div class="line">&lt;task:scheduler id=&quot;scheduler&quot; pool-size=&quot;5&quot; /&gt;</div><div class="line">&lt;task:annotation-driven executor=&quot;executor&quot; scheduler=&quot;scheduler&quot; /&gt;</div></pre></td></tr></table></figure></p>
<p>3.task配置,以及调度时间配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;bean name = &quot;myTask&quot; class = &quot;xxx.xxx.MyTask&quot; /&gt;</div><div class="line">&lt;task:scheduled-tasks scheduler=&quot;reportTaskScheduler&quot; &gt;</div><div class="line">    &lt;task:scheduled ref=&quot;myTask&quot; method=&quot;doTask&quot; cron=&quot;0/5 * * * * ?&quot; /&gt;</div><div class="line">&lt;/task:scheduled-tasks&gt;</div></pre></td></tr></table></figure></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>1.方法一如果要采用Spring来启动的话.就需要实现Spring的初始化Bean的接口(InitializingBean).在初始化之后,调用该任务的延迟队列.<br>2.Quartz与Spring的 Task的区别是一个可以异步,一个只能同步.<br>3.Spring 与Quartz的时间配置都是采用cron表达式.</p>
<h3 id="附录Cron表达式"><a href="#附录Cron表达式" class="headerlink" title="附录Cron表达式"></a>附录Cron表达式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">“0/10 * * * * ?” 每10秒触发 </div><div class="line">“0 0 12 * * ?” 每天中午12点触发 </div><div class="line">“0 15 10 ? * *” 每天上午10:15触发 </div><div class="line">“0 15 10 * * ?” 每天上午10:15触发 </div><div class="line">“0 15 10 * * ? *” 每天上午10:15触发 </div><div class="line">“0 15 10 * * ? 2005” 2005年的每天上午10:15触发 </div><div class="line">“0 * 14 * * ?” 在每天下午2点到下午2:59期间的每1分钟触发 </div><div class="line">“0 0/5 14 * * ?” 在每天下午2点到下午2:55期间的每5分钟触发 </div><div class="line">“0 0/5 14,18 * * ?” 在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发 </div><div class="line">“0 0-5 14 * * ?” 在每天下午2点到下午2:05期间的每1分钟触发 </div><div class="line">“0 10,44 14 ? 3 WED” 每年三月的星期三的下午2:10和2:44触发 </div><div class="line">“0 15 10 ? * MON-FRI” 周一至周五的上午10:15触发 </div><div class="line">“0 15 10 15 * ?” 每月15日上午10:15触发 </div><div class="line">“0 15 10 L * ?” 每月最后一日的上午10:15触发 </div><div class="line">“0 15 10 ? * 6L” 每月的最后一个星期五上午10:15触发 </div><div class="line">“0 15 10 ? * 6L 2002-2005” 2002年至2005年的每月的最后一个星期五上午10:15触发 </div><div class="line">“0 15 10 ? * 6#3” 每月的第三个星期五上午10:15触发 </div><div class="line">每隔5秒执行一次：/5 * * * ? </div><div class="line">每隔1分钟执行一次：0 /1 * * ? </div><div class="line">每天23点执行一次：0 0 23 * * ? </div><div class="line">每天凌晨1点执行一次：0 0 1 * * ? </div><div class="line">每月1号凌晨1点执行一次：0 0 1 1 * ? </div><div class="line">每月最后一天23点执行一次：0 0 23 L * ? </div><div class="line">每周星期天凌晨1点实行一次：0 0 1 ? * L </div><div class="line">在26分、29分、33分执行一次：0 26,29,33 * * * ? </div><div class="line">每天的0点、13点、18点、21点都执行一次：0 0 0,13,18,21 * * ?</div></pre></td></tr></table></figure>
<hr>
<h2 id="End"><a href="#End" class="headerlink" title="End"></a><center>End</center></h2>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;定时任务使用的方法&quot;&gt;&lt;a href=&quot;#定时任务使用的方法&quot; class=&quot;headerlink&quot; title=&quot;定时任务使用的方法&quot;&gt;&lt;/a&gt;定时任务使用的方法&lt;/h3&gt;&lt;p&gt;1.最原始的使用java提供的延迟循环队列.&lt;br&gt;2.使用Quartz提供的方法.
    
    </summary>
    
      <category term="java" scheme="https://lmxy1990.github.io/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>windows 下新建wifi热点</title>
    <link href="https://lmxy1990.github.io/2017/03/15/windows-%E4%B8%8B%E6%96%B0%E5%BB%BAwifi%E7%83%AD%E7%82%B9/"/>
    <id>https://lmxy1990.github.io/2017/03/15/windows-下新建wifi热点/</id>
    <published>2017-03-15T01:11:28.000Z</published>
    <updated>2017-03-15T01:30:43.270Z</updated>
    
    <content type="html"><![CDATA[<h3 id="查看无线网卡是否支持Wifi热点"><a href="#查看无线网卡是否支持Wifi热点" class="headerlink" title="查看无线网卡是否支持Wifi热点"></a>查看无线网卡是否支持Wifi热点</h3><ul>
<li>打开命令提示符:<br><code>netsh wlan show drivers</code></li>
</ul>
<h3 id="设置Wifi名-密码"><a href="#设置Wifi名-密码" class="headerlink" title="设置Wifi名/密码"></a>设置Wifi名/密码</h3><ul>
<li>打开命令提示符:<br><code>netsh wlan set hostednetwork mode=allow ssid=wifi名称 key=wifi密码</code></li>
</ul>
<h3 id="启动设置好的热点"><a href="#启动设置好的热点" class="headerlink" title="启动设置好的热点"></a>启动设置好的热点</h3><ul>
<li>打开命令提示符:<br><code>netsh wlan start hostednetwork</code></li>
</ul>
<h3 id="关闭热点"><a href="#关闭热点" class="headerlink" title="关闭热点"></a>关闭热点</h3><ul>
<li>打开命令提示符:<br><code>netsh wlan stop hostednetwork</code></li>
</ul>
<h3 id="最后需要把能访问到互联网的链接共享给这个wifi热点"><a href="#最后需要把能访问到互联网的链接共享给这个wifi热点" class="headerlink" title="最后需要把能访问到互联网的链接共享给这个wifi热点"></a>最后需要把能访问到互联网的链接共享给这个wifi热点</h3><p>控制面板–&gt;网络共享中心–&gt;属性–&gt;共享</p>
<hr>
<h2 id="End"><a href="#End" class="headerlink" title="End"></a><center>End</center></h2>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;查看无线网卡是否支持Wifi热点&quot;&gt;&lt;a href=&quot;#查看无线网卡是否支持Wifi热点&quot; class=&quot;headerlink&quot; title=&quot;查看无线网卡是否支持Wifi热点&quot;&gt;&lt;/a&gt;查看无线网卡是否支持Wifi热点&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;打开命令提示符:
    
    </summary>
    
      <category term="小技巧" scheme="https://lmxy1990.github.io/categories/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
    
  </entry>
  
  <entry>
    <title>浏览器劫持启动页清除</title>
    <link href="https://lmxy1990.github.io/2017/03/13/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8A%AB%E6%8C%81%E5%90%AF%E5%8A%A8%E9%A1%B5%E6%B8%85%E9%99%A4/"/>
    <id>https://lmxy1990.github.io/2017/03/13/浏览器劫持启动页清除/</id>
    <published>2017-03-13T01:55:57.000Z</published>
    <updated>2017-03-13T02:07:00.321Z</updated>
    
    <content type="html"><![CDATA[<h3 id="主页劫持与启动劫持"><a href="#主页劫持与启动劫持" class="headerlink" title="主页劫持与启动劫持"></a>主页劫持与启动劫持</h3><ol>
<li>启动劫持是主页明明是自己设定好的.但是启动的时候就是广告页面.</li>
<li>主页劫持是主页修改不了,或者修改了又自动变回来.<h3 id="查看启动劫持"><a href="#查看启动劫持" class="headerlink" title="查看启动劫持."></a>查看启动劫持.</h3>找到浏览器快捷方式,右键属性.在目标一栏后面会多出一个链接地址.这就是启动的时候都会去运行这个链接.<h3 id="清除"><a href="#清除" class="headerlink" title="清除"></a>清除</h3></li>
<li>简单的直接删除快捷方式—&gt;属性–&gt;目标后面的网址.<br>2.如果修改之后,一段时间有自动变回来.一般式监听脚本引起的.<br>开始–运行–wbemtest–连接–”root\subscription”–查询–”select <em> from __EventFilter“–应用–选择_EventFilter:Name=”unown_filter”删除之–关闭–查询–”select </em> from ActiveScriptEventConsumer”–应用–选择ActiveScriptEventConsumer Name=”unown”删除之–该关的窗口都关掉–编辑快捷方式</li>
</ol>
<hr>
<h2 id="End"><a href="#End" class="headerlink" title="End"></a><center>End</center></h2>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;主页劫持与启动劫持&quot;&gt;&lt;a href=&quot;#主页劫持与启动劫持&quot; class=&quot;headerlink&quot; title=&quot;主页劫持与启动劫持&quot;&gt;&lt;/a&gt;主页劫持与启动劫持&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;启动劫持是主页明明是自己设定好的.但是启动的时候就是广告页面.&lt;/li&gt;
    
    </summary>
    
      <category term="浏览器" scheme="https://lmxy1990.github.io/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>Java 对象转Excel文件</title>
    <link href="https://lmxy1990.github.io/2017/03/01/Java-%E5%AF%B9%E8%B1%A1%E8%BD%ACExcel%E6%96%87%E4%BB%B6/"/>
    <id>https://lmxy1990.github.io/2017/03/01/Java-对象转Excel文件/</id>
    <published>2017-03-01T10:39:48.000Z</published>
    <updated>2017-03-01T11:29:44.427Z</updated>
    
    <content type="html"><![CDATA[<h3 id="所用到的依赖jar包"><a href="#所用到的依赖jar包" class="headerlink" title="所用到的依赖jar包."></a>所用到的依赖jar包.</h3><p>1.阿帕奇的POI<br>2.阿里的fastjson<br>3.阿帕奇公共工具类</p>
<h3 id="代码逻辑"><a href="#代码逻辑" class="headerlink" title="代码逻辑"></a>代码逻辑</h3><p>1.通过反射获取对象成员变量名称作为Excel的标题.<br>2.反射获取到的对象成员变量值作为Excel的行数据.<br>3.写出文件.</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>1.工具类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div></pre></td><td class="code"><pre><div class="line">package my.test.org;</div><div class="line"></div><div class="line">import com.alibaba.fastjson.JSON;</div><div class="line">import org.apache.commons.collections.CollectionUtils;</div><div class="line">import org.apache.commons.lang3.StringUtils;</div><div class="line">import org.apache.poi.hssf.usermodel.*;</div><div class="line">import org.apache.poi.ss.usermodel.HorizontalAlignment;</div><div class="line"></div><div class="line">import javax.transaction.TransactionRequiredException;</div><div class="line">import java.io.FileNotFoundException;</div><div class="line">import java.io.FileOutputStream;</div><div class="line">import java.io.IOException;</div><div class="line">import java.lang.reflect.Field;</div><div class="line">import java.math.BigDecimal;</div><div class="line">import java.text.SimpleDateFormat;</div><div class="line">import java.util.*;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Author: xinyi.pan</div><div class="line"> * Date: 2017/3/1</div><div class="line"> * &lt;p&gt;</div><div class="line"> * 工具类:excel 导出</div><div class="line"> */</div><div class="line">public class AccessUtils &#123;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 将对象List转换为HSSFWorkbook对象</div><div class="line">     *</div><div class="line">     * @param objectList</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    public static &lt;T&gt; HSSFWorkbook ListObject2HSSFWorkbook(List&lt;T&gt;... objectList) &#123;</div><div class="line">        if (objectList == null || objectList.length == 0) &#123;</div><div class="line">            throw new IllegalArgumentException(&quot;待转换的对象为空&quot;);</div><div class="line">        &#125;</div><div class="line">        HSSFWorkbook workbook = new HSSFWorkbook();</div><div class="line">        for (int i = 0; i &lt; objectList.length; i++) &#123;</div><div class="line">            List&lt;T&gt; tList = objectList[i];</div><div class="line">            if (CollectionUtils.isNotEmpty(tList)) &#123;</div><div class="line">                String sheetName = objectList[i].get(0).getClass().getSimpleName();</div><div class="line">                if (StringUtils.isNotBlank(sheetName)) &#123;</div><div class="line">                    ListObject2HSSFWorkbook(objectList[i], sheetName, workbook);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return workbook;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 将List对象添加到对应的页</div><div class="line">     *</div><div class="line">     * @param objectList</div><div class="line">     * @param sheetName</div><div class="line">     * @param workbook</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    public static &lt;T&gt; HSSFWorkbook ListObject2HSSFWorkbook(List&lt;T&gt; objectList, String sheetName, HSSFWorkbook workbook) &#123;</div><div class="line">        //创建该页的首行</div><div class="line">        HSSFSheet sheet = workbook.createSheet(sheetName);</div><div class="line">        //创建基本样式居中</div><div class="line">        HSSFCellStyle style = workbook.createCellStyle();</div><div class="line">        style.setAlignment(HorizontalAlignment.CENTER);</div><div class="line"></div><div class="line">        boolean isFirstRow = true;</div><div class="line">        Map&lt;String, Integer&gt; keyMap = new HashMap&lt;String, Integer&gt;();</div><div class="line">        for (int i = 0; i &lt; objectList.size(); i++) &#123;</div><div class="line">            T t1 = objectList.get(i);</div><div class="line">            if (t1 == null) continue;</div><div class="line">            Class oClass = t1.getClass();</div><div class="line">            Field[] fields = oClass.getDeclaredFields();</div><div class="line">            if (fields == null || fields.length == 0) continue;</div><div class="line">            String key;</div><div class="line">            String valueStr;</div><div class="line">            if (isFirstRow) &#123;</div><div class="line">                //创建标题</div><div class="line">                HSSFRow row = sheet.createRow(0);</div><div class="line">                for (int j = 0, k = 0; j &lt; fields.length; j++) &#123;</div><div class="line">                    Field field = fields[j];</div><div class="line">                    if (field == null) continue;</div><div class="line">                    HSSFCell cell = row.createCell(k);</div><div class="line">                    key = field.getName();</div><div class="line">                    if (StringUtils.isBlank(key)) continue;</div><div class="line">                    if (&quot;serialVersionUID&quot;.equalsIgnoreCase(key)) continue;</div><div class="line">                    cell.setCellStyle(style);</div><div class="line">                    cell.setCellValue(key);</div><div class="line">                    keyMap.put(key, k);</div><div class="line">                    k++;</div><div class="line">                &#125;</div><div class="line">                isFirstRow = false;</div><div class="line">            &#125;</div><div class="line">            //添加数据</div><div class="line">            HSSFRow row = sheet.createRow(i + 1);</div><div class="line">            for (int j = 0; j &lt; fields.length; j++) &#123;</div><div class="line">                Field field = fields[j];</div><div class="line">                if (field == null) continue;</div><div class="line">                try &#123;</div><div class="line">                    key = field.getName();</div><div class="line">                    HSSFCell cell = row.createCell(keyMap.get(key));</div><div class="line">                    if (StringUtils.isBlank(key)) continue;</div><div class="line">                    if (&quot;serialVersionUID&quot;.equalsIgnoreCase(key)) continue;</div><div class="line">                    field.setAccessible(true);</div><div class="line">                    Object value = field.get(t1);</div><div class="line">                    if (value == null) continue;</div><div class="line">                    //日期格式化</div><div class="line">                    if (value instanceof Calendar) &#123;</div><div class="line">                        SimpleDateFormat dateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd hh:mm:ss&quot;);</div><div class="line">                        valueStr = dateFormat.format(((Calendar) value).getTime());</div><div class="line">                    &#125; else if (value instanceof Date) &#123;</div><div class="line">                        SimpleDateFormat dateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd hh:mm:ss&quot;);</div><div class="line">                        valueStr = dateFormat.format(value);</div><div class="line">                    &#125; else &#123;</div><div class="line">                        //其他转换为JSON字符串,去掉引号</div><div class="line">                        valueStr = JSON.toJSONString(value).replaceAll(&quot;\&quot;&quot;, &quot;&quot;);</div><div class="line">                    &#125;</div><div class="line">                    cell.setCellValue(valueStr);</div><div class="line">                &#125; catch (IllegalAccessException e) &#123;</div><div class="line">                    //异常继续执行下一个成员变量</div><div class="line">                    continue;</div><div class="line">                &#125; catch (Exception e) &#123;</div><div class="line">                    //异常继续执行下一个成员变量</div><div class="line">                    continue;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        //列宽自适应</div><div class="line">        for (int i = 0; i &lt; keyMap.size(); i++) &#123;</div><div class="line">            sheet.autoSizeColumn(i);</div><div class="line">            sheet.setColumnWidth(i, sheet.getColumnWidth(i) * 17 / 10);</div><div class="line">        &#125;</div><div class="line">        return workbook;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        List&lt;Student&gt; studentList = new ArrayList&lt;Student&gt;();</div><div class="line">        List&lt;String&gt; stringList = new ArrayList&lt;String&gt;();</div><div class="line">        stringList.add(&quot;qqqq&quot;);</div><div class="line">        stringList.add(&quot;wwww&quot;);</div><div class="line">        stringList.add(&quot;eeee&quot;);</div><div class="line"></div><div class="line">        Student student1 = new Student();</div><div class="line">        student1.set学生姓名(&quot;张三&quot;);</div><div class="line">        student1.set学生成绩(new BigDecimal(&quot;90&quot;));</div><div class="line">        student1.setStringList(stringList);</div><div class="line">        studentList.add(student1);</div><div class="line"></div><div class="line">        Student student2 = new Student();</div><div class="line">        student2.set学生姓名(&quot;李四&quot;);</div><div class="line">        student2.set学生成绩(new BigDecimal(&quot;80&quot;));</div><div class="line">        studentList.add(student2);</div><div class="line"></div><div class="line">        Student student3 = new Student();</div><div class="line">        student3.set学生姓名(&quot;王五&quot;);</div><div class="line">        student3.set学生成绩(new BigDecimal(&quot;50&quot;));</div><div class="line">        studentList.add(student3);</div><div class="line"></div><div class="line">        Student student4 = new Student();</div><div class="line">        student4.set学生姓名(&quot;陈翔&quot;);</div><div class="line">        student4.set学生成绩(new BigDecimal(&quot;0.0&quot;));</div><div class="line">        studentList.add(student4);</div><div class="line"></div><div class="line">        HSSFWorkbook workbook = new HSSFWorkbook();</div><div class="line">        try &#123;</div><div class="line">            workbook = AccessUtils.ListObject2HSSFWorkbook(studentList);</div><div class="line">            FileOutputStream outputStream = new FileOutputStream(&quot;E:\\downloads\\test.xls&quot;);</div><div class="line">            workbook.write(outputStream);</div><div class="line">        &#125; catch (TransactionRequiredException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; catch (FileNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; catch (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2.测试用到的对象<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line">package my.test.org;</div><div class="line"></div><div class="line">import java.io.Serializable;</div><div class="line">import java.math.BigDecimal;</div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Author: xinyi.pan</div><div class="line"> * Date: 2017/3/1</div><div class="line"> */</div><div class="line">public class Student implements Serializable &#123;</div><div class="line"></div><div class="line">    private static final long serialVersionUID = 7911823052873591951L;</div><div class="line">    private String 学生姓名 ;</div><div class="line">    private BigDecimal 学生成绩 ;</div><div class="line">    private List&lt;String&gt; stringList ;</div><div class="line"></div><div class="line"></div><div class="line">    public String get学生姓名() &#123;</div><div class="line">        return 学生姓名;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void set学生姓名(String 学生姓名) &#123;</div><div class="line">        this.学生姓名 = 学生姓名;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public BigDecimal get学生成绩() &#123;</div><div class="line">        return 学生成绩;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void set学生成绩(BigDecimal 学生成绩) &#123;</div><div class="line">        this.学生成绩 = 学生成绩;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public List&lt;String&gt; getStringList() &#123;</div><div class="line">        return stringList;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setStringList(List&lt;String&gt; stringList) &#123;</div><div class="line">        this.stringList = stringList;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">package my.test.org;</div><div class="line"></div><div class="line">import java.io.Serializable;</div><div class="line">import java.math.BigDecimal;</div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Author: xinyi.pan</div><div class="line"> * Date: 2017/3/1</div><div class="line"> */</div><div class="line">public class Student implements Serializable &#123;</div><div class="line"></div><div class="line">    private static final long serialVersionUID = 7911823052873591951L;</div><div class="line">    private String 学生姓名 ;</div><div class="line">    private BigDecimal 学生成绩 ;</div><div class="line">    private List&lt;String&gt; stringList ;</div><div class="line"></div><div class="line"></div><div class="line">    public String get学生姓名() &#123;</div><div class="line">        return 学生姓名;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void set学生姓名(String 学生姓名) &#123;</div><div class="line">        this.学生姓名 = 学生姓名;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public BigDecimal get学生成绩() &#123;</div><div class="line">        return 学生成绩;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void set学生成绩(BigDecimal 学生成绩) &#123;</div><div class="line">        this.学生成绩 = 学生成绩;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public List&lt;String&gt; getStringList() &#123;</div><div class="line">        return stringList;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setStringList(List&lt;String&gt; stringList) &#123;</div><div class="line">        this.stringList = stringList;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="输出的结果"><a href="#输出的结果" class="headerlink" title="输出的结果"></a>输出的结果</h3><table><br>    <thead><br>        <th><br>            </th></thead><td>学生姓名</td><br>            <td>学生成绩</td><br>            <td>stringList</td><br>        <br>    <br>    <tbody><br>        <tr><br>            <td>张三</td><br>            <td>90</td><br>            <td>[qqqq,wwww,eeee]</td><br>        </tr><br>        <tr><br>            <td>李四</td><br>            <td>80</td><br>            <td></td><br>        </tr><br>        <tr><br>            <td>王五</td><br>            <td>50</td><br>            <td></td><br>        </tr><br>        <tr><br>            <td>陈翔</td><br>            <td>0.0</td><br>            <td></td><br>        </tr><br>    </tbody><br></table>

<hr>
<h2 id="End"><a href="#End" class="headerlink" title="End"></a><center>End</center></h2>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;所用到的依赖jar包&quot;&gt;&lt;a href=&quot;#所用到的依赖jar包&quot; class=&quot;headerlink&quot; title=&quot;所用到的依赖jar包.&quot;&gt;&lt;/a&gt;所用到的依赖jar包.&lt;/h3&gt;&lt;p&gt;1.阿帕奇的POI&lt;br&gt;2.阿里的fastjson&lt;br&gt;3.阿帕奇公
    
    </summary>
    
      <category term="工具类" scheme="https://lmxy1990.github.io/categories/%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>ubuntu 主题推荐</title>
    <link href="https://lmxy1990.github.io/2017/02/20/ubuntu-%E4%B8%BB%E9%A2%98%E6%8E%A8%E8%8D%90/"/>
    <id>https://lmxy1990.github.io/2017/02/20/ubuntu-主题推荐/</id>
    <published>2017-02-20T03:23:38.000Z</published>
    <updated>2017-02-20T08:11:00.462Z</updated>
    
    <content type="html"><![CDATA[<h3 id="更换源"><a href="#更换源" class="headerlink" title="更换源"></a>更换源</h3><p>打开系统设置 &gt; 软件和更新 选择中国服务器(官方用的是阿里云)</p>
<h3 id="设置新建窗口居中"><a href="#设置新建窗口居中" class="headerlink" title="设置新建窗口居中"></a>设置新建窗口居中</h3><p>打开终端:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt install compizconfig-settings-manager</div></pre></td></tr></table></figure></p>
<p>然后打开compizconfig-settings-manager来配置.<br>在窗口管理 &gt; 放置窗口 &gt; 安置模式 &gt; 居中</p>
<h3 id="安装主题工具-unity-tweak-tool"><a href="#安装主题工具-unity-tweak-tool" class="headerlink" title="安装主题工具 unity-tweak-tool"></a>安装主题工具 unity-tweak-tool</h3><p>打开终端:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo  apt-get  install unity-tweak-tool</div></pre></td></tr></table></figure></p>
<h3 id="添加主题"><a href="#添加主题" class="headerlink" title="添加主题"></a>添加主题</h3><p>1.Arc 主题安装<br>打开终端:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo sh -c &quot;echo &apos;deb http://download.opensuse.org/repositories/home:/Horst3180/xUbuntu_16.04/ /&apos; &gt;&gt; /etc/apt/sources.list.d/arc-theme.list&quot;</div></pre></td></tr></table></figure></p>
<p>让 Arc GTK 主题源定期收到主题更新:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">wget http://download.opensuse.org/repositories/home:Horst3180/xUbuntu_16.04/Release.key</div><div class="line"></div><div class="line">sudo apt-key add - &lt; Release.key</div></pre></td></tr></table></figure></p>
<p>安装arc主题:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt update</div><div class="line">sudo apt install arc-theme</div></pre></td></tr></table></figure></p>
<h3 id="换掉ubuntu启动器的图标"><a href="#换掉ubuntu启动器的图标" class="headerlink" title="换掉ubuntu启动器的图标"></a>换掉ubuntu启动器的图标</h3><p>将面板上的 ‘Ubuntu Desktop’ 文字替换 ‘Mac’<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd &amp;&amp; wget -O Mac.po http://drive.noobslab.com/data/Mac/change-name-on-panel/mac.po</div><div class="line"></div><div class="line">cd /usr/share/locale/en/LC_MESSAGES; sudo msgfmt -o unity.mo ~/Mac.po;rm ~/Mac.po;cd</div></pre></td></tr></table></figure></p>
<p>语言上如果是其他非英语语言，将 /en 做相应修改：</p>
<p>恢复原来的桌面文字命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd &amp;&amp; wget -O Ubuntu.po http://drive.noobslab.com/data/Mac/change-name-on-panel/ubuntu.po</div><div class="line"></div><div class="line">cd /usr/share/locale/en/LC_MESSAGES; sudo msgfmt -o unity.mo ~/Ubuntu.po;rm ~/Ubuntu.po;cd</div></pre></td></tr></table></figure></p>
<p>启动器上苹果Logo<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">wget -O launcher_bfb.png http://drive.noobslab.com/data/Mac/launcher-logo/apple/launcher_bfb.png</div><div class="line"></div><div class="line">sudo mv launcher_bfb.png /usr/share/unity/icons/</div></pre></td></tr></table></figure></p>
<p>恢复图标：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">wget -O launcher_bfb.png http://drive.noobslab.com/data/Mac/launcher-logo/ubuntu/launcher_bfb.png</div><div class="line"></div><div class="line">sudo mv launcher_bfb.png /usr/share/unity/icons/</div></pre></td></tr></table></figure></p>
<h3 id="设置主题"><a href="#设置主题" class="headerlink" title="设置主题"></a>设置主题</h3><p>打开 Unity Tweak Tool 工具软件.<br>找到主题 设置自己喜欢的主题即可.</p>
<hr>
<h2 id="End"><a href="#End" class="headerlink" title="End"></a><center>End</center></h2>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;更换源&quot;&gt;&lt;a href=&quot;#更换源&quot; class=&quot;headerlink&quot; title=&quot;更换源&quot;&gt;&lt;/a&gt;更换源&lt;/h3&gt;&lt;p&gt;打开系统设置 &amp;gt; 软件和更新 选择中国服务器(官方用的是阿里云)&lt;/p&gt;
&lt;h3 id=&quot;设置新建窗口居中&quot;&gt;&lt;a href=
    
    </summary>
    
      <category term="Linux" scheme="https://lmxy1990.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>ubuntu 清除Guest账户</title>
    <link href="https://lmxy1990.github.io/2017/02/17/ubuntu-%E6%B8%85%E9%99%A4Guest%E8%B4%A6%E6%88%B7/"/>
    <id>https://lmxy1990.github.io/2017/02/17/ubuntu-清除Guest账户/</id>
    <published>2017-02-17T09:58:24.000Z</published>
    <updated>2017-02-17T10:00:26.982Z</updated>
    
    <content type="html"><![CDATA[<p>删除:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo mkdir /etc/lightdm/lightdm.conf.d</div><div class="line"></div><div class="line">sudo sh -c &apos;printf &quot;[SeatDefaults]\nallow-guest=false\n&quot; &gt; /etc/lightdm/lightdm.conf.d/50-no-guest.conf&apos;</div></pre></td></tr></table></figure></p>
<p>恢复:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo rm /etc/lightdm/lightdm.conf.d/50-no-guest.conf</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="End"><a href="#End" class="headerlink" title="End"></a><center>End</center></h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;删除:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;l
    
    </summary>
    
      <category term="linux" scheme="https://lmxy1990.github.io/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>浅谈关系数据使用非关系型数据库处理方法</title>
    <link href="https://lmxy1990.github.io/2017/01/26/%E6%B5%85%E8%B0%88%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E4%BD%BF%E7%94%A8%E9%9D%9E%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95/"/>
    <id>https://lmxy1990.github.io/2017/01/26/浅谈关系数据使用非关系型数据库处理方法/</id>
    <published>2017-01-26T01:25:38.000Z</published>
    <updated>2017-02-06T03:24:51.431Z</updated>
    
    <content type="html"><![CDATA[<p>场景:多个数据表关联.需要查询多个表的信息.<br>表1:用户名+性别<br>表2:表1的id,密码<br>表3:用户id+用户车辆信息</p>
<p>查询条件:需要查询某个用户的大众车辆,并查询该用户的密码.假色有很多台.采用分页查询.那么这里应该区分主表,附加表.我们需要的数据,必须是筛选过的数据才能准确分页.所以,最后的信息一定是主表,也就是表1.</p>
<p>可以采用先查询所有用户中,车辆为大众的用户id.然后,根据用户名,用户id去筛选出用户信息.再根据用户表的id.去查询用户密码.</p>
<p>为什么要如此做?<br>1.筛选条件前置,才能去除分页之后再筛选造成的数据错误.<br>2.查询速度其实是一样的,因为都需要去查询两个表.<br>3.相对于没有筛选的条件的信息获取,先查寻出id,再根据id拉取数据,一般这个id都会做索引.所以,如此的话,速度应该也能满足.</p>
<hr>
<h2 id="End"><a href="#End" class="headerlink" title="End"></a><center>End</center></h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;场景:多个数据表关联.需要查询多个表的信息.&lt;br&gt;表1:用户名+性别&lt;br&gt;表2:表1的id,密码&lt;br&gt;表3:用户id+用户车辆信息&lt;/p&gt;
&lt;p&gt;查询条件:需要查询某个用户的大众车辆,并查询该用户的密码.假色有很多台.采用分页查询.那么这里应该区分主表,附加表.我们需
    
    </summary>
    
      <category term="工作日志" scheme="https://lmxy1990.github.io/categories/%E5%B7%A5%E4%BD%9C%E6%97%A5%E5%BF%97/"/>
    
    
  </entry>
  
</feed>
