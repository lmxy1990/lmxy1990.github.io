<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lmxy1990 &#39; Blog</title>
  <subtitle>love code, enjoy life .</subtitle>
  <link href="//atom.xml" rel="self"/>
  
  <link href="https://lmxy1990.github.io/"/>
  <updated>2017-01-05T13:55:02.041Z</updated>
  <id>https://lmxy1990.github.io/</id>
  
  <author>
    <name>lmxy1990</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>http协议状态码</title>
    <link href="https://lmxy1990.github.io/2017/01/05/http%E5%8D%8F%E8%AE%AE%E7%8A%B6%E6%80%81%E7%A0%81/"/>
    <id>https://lmxy1990.github.io/2017/01/05/http协议状态码/</id>
    <published>2017-01-05T13:34:19.000Z</published>
    <updated>2017-01-05T13:55:02.041Z</updated>
    
    <content type="html"><![CDATA[<h2 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h2><p>200 服务器成功返回网页 404 – 请求的网页不存在 503 – 服务不可用<br><code>1xx</code>（临时响应）表示临时响应并需要请求者继续执行操作的状态代码。</p>
<h2 id="代码-说明"><a href="#代码-说明" class="headerlink" title="代码 说明"></a>代码 说明</h2><p>100   （继续） 请求者应当继续提出请求。 服务器返回此代码表示已收到请求的第一部分，正在等待其余部分。<br>101   （切换协议） 请求者已要求服务器切换协议，服务器已确认并准备切换。<br><br></p>
<h2 id="2xx-成功-表示成功处理了请求的状态代码。"><a href="#2xx-成功-表示成功处理了请求的状态代码。" class="headerlink" title="2xx  (成功)表示成功处理了请求的状态代码。"></a><code>2xx</code>  (成功)表示成功处理了请求的状态代码。</h2><h2 id="代码-说明-1"><a href="#代码-说明-1" class="headerlink" title="代码 说明"></a>代码 说明</h2><p>200   （成功）  服务器已成功处理了请求。 通常，这表示服务器提供了请求的网页。<br>201   （已创建）  请求成功并且服务器创建了新的资源。<br>202   （已接受）  服务器已接受请求，但尚未处理。<br>203   （非授权信息）  服务器已成功处理了请求，但返回的信息可能来自另一来源。<br>204   （无内容）  服务器成功处理了请求，但没有返回任何内容。<br>205   （重置内容） 服务器成功处理了请求，但没有返回任何内容。<br>206   （部分内容）  服务器成功处理了部分 GET 请求。<br><br><br><code>3xx</code> （重定向） </p>
<h2 id="表示要完成请求，需要进一步操作。-通常，这些状态代码用来重定向。"><a href="#表示要完成请求，需要进一步操作。-通常，这些状态代码用来重定向。" class="headerlink" title="表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。"></a>表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。</h2><h2 id="代码-说明-2"><a href="#代码-说明-2" class="headerlink" title="代码 说明"></a>代码 说明</h2><p>300   （多种选择）  针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。<br>301   （永久移动）  请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。<br>302   （临时移动）  服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。<br>303   （查看其他位置） 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。<br>304   （未修改） 自从上次请求后，请求的网页未修改过。 服务器返回此响应时，不会返回网页内容。<br>305   （使用代理） 请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理。<br>307   （临时重定向）  服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。<br><br><br><code>4xx</code>（请求错误） </p>
<h2 id="这些状态代码表示请求可能出错，妨碍了服务器的处理。"><a href="#这些状态代码表示请求可能出错，妨碍了服务器的处理。" class="headerlink" title="这些状态代码表示请求可能出错，妨碍了服务器的处理。"></a>这些状态代码表示请求可能出错，妨碍了服务器的处理。</h2><h2 id="代码-说明-3"><a href="#代码-说明-3" class="headerlink" title="代码 说明"></a>代码 说明</h2><p>400   （错误请求） 服务器不理解请求的语法。<br>401   （未授权） 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。<br>403   （禁止） 服务器拒绝请求。<br>404   （未找到） 服务器找不到请求的网页。<br>405   （方法禁用） 禁用请求中指定的方法。<br>406   （不接受） 无法使用请求的内容特性响应请求的网页。<br>407   （需要代理授权） 此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理。<br>408   （请求超时）  服务器等候请求时发生超时。<br>409   （冲突）  服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲突的信息。<br>410   （已删除）  如果请求的资源已永久删除，服务器就会返回此响应。<br>411   （需要有效长度） 服务器不接受不含有效内容长度标头字段的请求。<br>412   （未满足前提条件） 服务器未满足请求者在请求中设置的其中一个前提条件。<br>413   （请求实体过大） 服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。<br>414   （请求的 URI 过长） 请求的 URI（通常为网址）过长，服务器无法处理。<br>415   （不支持的媒体类型） 请求的格式不受请求页面的支持。<br>416   （请求范围不符合要求） 如果页面无法提供请求的范围，则服务器会返回此状态代码。<br>417   （未满足期望值） 服务器未满足”期望”请求标头字段的要求。<br><br><br><code>5xx</code>（服务器错误） </p>
<h2 id="这些状态代码表示服务器在尝试处理请求时发生内部错误。-这些错误可能是服务器本身的错误，而不是请求出错。"><a href="#这些状态代码表示服务器在尝试处理请求时发生内部错误。-这些错误可能是服务器本身的错误，而不是请求出错。" class="headerlink" title="这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。"></a>这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。</h2><h2 id="代码-说明-4"><a href="#代码-说明-4" class="headerlink" title="代码 说明"></a>代码 说明</h2><p>500   （服务器内部错误）  服务器遇到错误，无法完成请求。<br>501   （尚未实施） 服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码。<br>502   （错误网关） 服务器作为网关或代理，从上游服务器收到无效响应。<br>503   （服务不可用） 服务器目前无法使用（由于超载或停机维护）。 通常，这只是暂时状态。<br>504   （网关超时）  服务器作为网关或代理，但是没有及时从上游服务器收到请求。 </p>
<h2 id="505-（HTTP-版本不受支持）-服务器不支持请求中所用的-HTTP-协议版本。"><a href="#505-（HTTP-版本不受支持）-服务器不支持请求中所用的-HTTP-协议版本。" class="headerlink" title="505   （HTTP 版本不受支持） 服务器不支持请求中所用的 HTTP 协议版本。"></a>505   （HTTP 版本不受支持） 服务器不支持请求中所用的 HTTP 协议版本。</h2><h2 id="新"><a href="#新" class="headerlink" title="新"></a>新</h2><p>RFC 6585 最近刚刚发布，该文档描述了 4 个新的 HTTP 状态码。</p>
<p>HTTP 协议还在变化？是的，HTTP 协议一直在演变，新的状态码对于开发 REST 服务或者说是基于 HTTP 的服务非常有用，下面我们为你详细介绍这四个新的状态码以及是否应该使用。</p>
<p>428 Precondition Required (要求先决条件)</p>
<p>先决条件是客户端发送 HTTP 请求时，如果想要请求能成功必须满足一些预设的条件。</p>
<p>一个好的例子就是 If-None-Match 头，经常在 GET 请求中使用，如果指定了 If-None-Match ，那么客户端只在响应中的 ETag 改变后才会重新接收回应。</p>
<p>先决条件的另外一个例子就是 If-Match 头，这个一般用在 PUT 请求上用于指示只更新没被改变的资源，这在多个客户端使用 HTTP 服务时用来防止彼此间不会覆盖相同内容。</p>
<p>当服务器端使用 428 Precondition Required 状态码时，表示客户端必须发送上述的请求头才能执行请求，这个方法为服务器提供一种有效的方法来阻止 ‘lost update’ 问题。</p>
<p>429 Too Many Requests (太多请求)</p>
<p>当你需要限制客户端请求某个服务数量时，该状态码就很有用，也就是请求速度限制。</p>
<p>在此之前，有一些类似的状态码，例如 ‘509 Bandwidth Limit Exceeded’. Twitter 使用 420 （这不是HTTP定义的状态码）</p>
<p>如果你希望限制客户端对服务的请求数，可使用 429 状态码，同时包含一个 Retry-After 响应头用于告诉客户端多长时间后可以再次请求服务。</p>
<p>431 Request Header Fields Too Large (请求头字段太大)</p>
<p>某些情况下，客户端发送 HTTP 请求头会变得很大，那么服务器可发送 431 Request Header Fields Too Large 来指明该问题。</p>
<p>我不太清楚为什么没有 430 状态码，而是直接从 429 跳到 431，我尝试搜索但没有结果。唯一的猜测是 430 Forbidden 跟 403 Forbidden 太像了，为了避免混淆才这么做的，天知道！</p>
<p>511 Network Authentication Required (要求网络认证)</p>
<p>对我来说这个状态码很有趣，如果你在开发一个 HTTP 服务器，你不一定需要处理该状态码，但如果你在编写 HTTP 客户端，那这个状态码就非常重要。</p>
<p>如果你频繁使用笔记本和智能手机，你可能会注意到大量的公用 WIFI 服务要求你必须接受一些协议或者必须登录后才能使用。</p>
<p>这是通过拦截HTTP流量，当用户试图访问网络返回一个重定向和登录，这很讨厌，但是实际情况就是这样的。</p>
<p>使用这些“拦截”客户端，会有一些讨厌的副作用。在 RFC 中有提到这两个的例子：</p>
<p>如果你在登录WIFI前访问某个网站，网络设备将会拦截首个请求，这些设备往往也有自己的网站图标 ‘favicon.ico’。登录后您会发现，有一段时间内你访问的网站图标一直是WIFI登录网站的图标。<br>如果客户端使用HTTP请求来查找文档（可能是JSON），网络将会响应一个登录页，这样你的客户端就会解析错误并导致客户端运行异常，在现实中这种问题非常常见。<br>因此 511 状态码的提出就是为了解决这个问题。</p>
<p>如果你正在编写 HTTP 的客户端，你最好还是检查 511 状态码以确认是否需要认证后才能访问。</p>
<h2 id="End"><a href="#End" class="headerlink" title="End"></a><center>End</center></h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;状态&quot;&gt;&lt;a href=&quot;#状态&quot; class=&quot;headerlink&quot; title=&quot;状态&quot;&gt;&lt;/a&gt;状态&lt;/h2&gt;&lt;p&gt;200 服务器成功返回网页 404 – 请求的网页不存在 503 – 服务不可用&lt;br&gt;&lt;code&gt;1xx&lt;/code&gt;（临时响应）表示临时
    
    </summary>
    
      <category term="http" scheme="https://lmxy1990.github.io/categories/http/"/>
    
    
  </entry>
  
  <entry>
    <title>设计模式之装饰者模式</title>
    <link href="https://lmxy1990.github.io/2017/01/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://lmxy1990.github.io/2017/01/04/设计模式之装饰者模式/</id>
    <published>2017-01-04T01:30:19.000Z</published>
    <updated>2017-01-05T13:55:36.759Z</updated>
    
    <content type="html"><![CDATA[<h2 id="装饰者模式简述"><a href="#装饰者模式简述" class="headerlink" title="装饰者模式简述"></a>装饰者模式简述</h2><ul>
<li>装饰者模式可以形象的比喻一所大房子,外面只有一个门.打开门里面还有门.打开门获取一点金钱.你可以无限的进门..</li>
</ul>
<ul>
<li>Component（被装饰对象的基类）</li>
<li>ConcreteComponent（具体被装饰对象）</li>
<li>Decorator（装饰者抽象类）</li>
<li>ConcreteDecorator（具体装饰者）<br><br></li>
</ul>
<hr>
<h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p><img src="/img/design_pattern/decorator.jpg" alt="装饰者"></p>
<hr>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><ol>
<li><p>定义一个抽象类(非必须)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">package com.pan.component;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 抽象类</div><div class="line"> * </div><div class="line"> * @author xinyi.pan</div><div class="line"> *</div><div class="line"> */</div><div class="line">public abstract class Animal &#123;</div><div class="line"></div><div class="line">    private String name;</div><div class="line"></div><div class="line">    public Animal(String name) &#123;</div><div class="line">        this.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getName() &#123;</div><div class="line">        return name;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>定义一个被装饰的接口(定义公共的方法).</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">package com.pan.component;</div><div class="line"></div><div class="line">public interface Fight &#123;</div><div class="line">    </div><div class="line">    //公共方法(门)</div><div class="line">    public String fightPower() ;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>单独类cat</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">package com.pan.component;</div><div class="line"></div><div class="line">public class Cat extends Animal implements Fight &#123;</div><div class="line"></div><div class="line">    public Cat(String name) &#123;</div><div class="line">        super(name);</div><div class="line">    &#125;</div><div class="line">    //基类的门,里面不再有门..</div><div class="line">    public String fightPower() &#123;</div><div class="line">        return super.getName() +&quot; fighting&quot; ;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>单独类cattle</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">package com.pan.component;</div><div class="line"></div><div class="line">public class Cattle extends Animal implements Fight &#123;</div><div class="line"></div><div class="line">    public Cattle(String name) &#123;</div><div class="line">        super(name);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String fightPower() &#123;</div><div class="line">        return super.getName() + &quot; sleep&quot;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>定义抽象装饰类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">package com.pan.decorator;</div><div class="line"></div><div class="line">import com.pan.component.Fight;</div><div class="line"></div><div class="line">public abstract class AnimalDecorator implements Fight &#123;</div><div class="line"></div><div class="line">    private Fight fight;</div><div class="line">    // 构造函数添加被装饰着对象</div><div class="line">    public AnimalDecorator(Fight fight) &#123;</div><div class="line">        this.fight = fight;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //拆包装饰者</div><div class="line">    public String fightPower() &#123;</div><div class="line">        //调用装饰者公共方法</div><div class="line">        doDecoratorFight();</div><div class="line">        //打开下一个门</div><div class="line">        return fight.fightPower();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //装饰者的公共方法.</div><div class="line">    public abstract void doDecoratorFight() ;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>cattle装饰类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">package com.pan.decorator;</div><div class="line"></div><div class="line">import com.pan.component.Fight;</div><div class="line"></div><div class="line">public class CattleDecorator extends AnimalDecorator &#123;</div><div class="line"></div><div class="line">    public CattleDecorator(Fight fight) &#123;</div><div class="line">        super(fight);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String fightPower() &#123;</div><div class="line">        return super.fightPower();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void doDecoratorFight() &#123;</div><div class="line">        System.out.println(&quot;cattle 打豆豆&quot;);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>测试方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">package com.pan.test;</div><div class="line"></div><div class="line">import com.pan.component.Cat;</div><div class="line">import com.pan.decorator.CatDecorator;</div><div class="line">import com.pan.decorator.CattleDecorator;</div><div class="line"></div><div class="line">public class CalTest &#123;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        </div><div class="line">        System.out.println(&quot;==================未装饰cat==================&quot;);</div><div class="line">        System.out.println(new Cat(&quot;cat&quot;).fightPower());</div><div class="line">        System.out.println(&quot;===================装饰cat======================&quot;);</div><div class="line">        CatDecorator catDecorator = new CatDecorator(new Cat(&quot;cat&quot;)) ;</div><div class="line">        System.out.println(catDecorator.fightPower());</div><div class="line">        CattleDecorator cattleDecorator = new CattleDecorator(catDecorator) ;</div><div class="line">        System.out.println(&quot;====================cattle装饰cat装饰=====================&quot;);</div><div class="line">        System.out.println(cattleDecorator.fightPower());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>结果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">==================未装饰cat==================</div><div class="line">cat fighting</div><div class="line">===================装饰cat======================</div><div class="line">cat 打豆豆</div><div class="line">cat fighting</div><div class="line">====================cattle装饰cat装饰=====================</div><div class="line">cattle 打豆豆</div><div class="line">cat 打豆豆</div><div class="line">cat fighting</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="End"><a href="#End" class="headerlink" title="End"></a><center>End</center></h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;装饰者模式简述&quot;&gt;&lt;a href=&quot;#装饰者模式简述&quot; class=&quot;headerlink&quot; title=&quot;装饰者模式简述&quot;&gt;&lt;/a&gt;装饰者模式简述&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;装饰者模式可以形象的比喻一所大房子,外面只有一个门.打开门里面还有门.打开门获取一点金钱
    
    </summary>
    
      <category term="设计模式" scheme="https://lmxy1990.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>去百度右侧推广方法</title>
    <link href="https://lmxy1990.github.io/2017/01/02/%E5%8E%BB%E7%99%BE%E5%BA%A6%E6%8E%A8%E5%B9%BF%E6%96%B9%E6%B3%95/"/>
    <id>https://lmxy1990.github.io/2017/01/02/去百度推广方法/</id>
    <published>2017-01-02T03:19:12.000Z</published>
    <updated>2017-01-02T04:32:36.283Z</updated>
    
    <content type="html"><![CDATA[<h2 id="百度越来越恶心了…"><a href="#百度越来越恶心了…" class="headerlink" title="百度越来越恶心了…"></a>百度越来越恶心了…</h2><hr>
<h3 id="下面介绍一种简单的去百度推广方法-采用的是chrome浏览器"><a href="#下面介绍一种简单的去百度推广方法-采用的是chrome浏览器" class="headerlink" title="下面介绍一种简单的去百度推广方法,采用的是chrome浏览器."></a>下面介绍一种简单的去百度推广方法,采用的是chrome浏览器.</h3><hr>
<ol>
<li>安装adb去广告插件.<br><img src="/img/suggest/adb_plus.jpg" alt="添加adb_plus插件"></li>
<li>添加自定义规则.<br><img src="/img/suggest/add_rude.jpg" alt="添加自定义规则"></li>
<li>右侧推广去掉的结果<br><img src="/img/suggest/remove_result.jpg" alt="结果1"></li>
<li>但是还有搜索的推广<br><img src="/img/suggest/bad_ad.jpg" alt="左侧推广"></li>
<li>添加清除左侧推广规则<br><img src="/img/suggest/remove_list.jpg" alt="清除左侧推广"></li>
<li>全部结果<br><img src="/img/suggest/all_result.jpg" alt="结果"><br>7.规则:<ul>
<li><code>##div[class*=&quot;cr-content&quot;]</code></li>
<li><code>##div[class*=&quot;opr-recommends-merge-panel&quot;]</code></li>
<li><code>##div[id*=&quot;con-ar&quot;]</code></li>
<li><code>##div[style*=&quot;!important&quot;]</code></li>
</ul>
</li>
</ol>
<h2 id="End"><a href="#End" class="headerlink" title="End"></a><center>End</center></h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;百度越来越恶心了…&quot;&gt;&lt;a href=&quot;#百度越来越恶心了…&quot; class=&quot;headerlink&quot; title=&quot;百度越来越恶心了…&quot;&gt;&lt;/a&gt;百度越来越恶心了…&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;下面介绍一种简单的去百度推广方法-采用的是chrome浏览器&quot;&gt;
    
    </summary>
    
      <category term="小技巧" scheme="https://lmxy1990.github.io/categories/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
    
  </entry>
  
  <entry>
    <title>设计模式之观察者模式</title>
    <link href="https://lmxy1990.github.io/2016/12/30/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://lmxy1990.github.io/2016/12/30/设计模式之观察者模式/</id>
    <published>2016-12-30T04:30:42.000Z</published>
    <updated>2016-12-30T05:33:12.341Z</updated>
    
    <content type="html"><![CDATA[<h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><hr>
<ul>
<li>观察者模式一般使用在订阅/推送功能下,数据提供方推送数据–&gt;数据接收方.其实在开发中该模式使用应该是很普遍的.例如站内信/信息中心/订阅都是用的是该设计模式.<br><br><ul>
<li>方式1:数据推送方—&gt;查询订购对象—&gt;推送给订购对象.</li>
<li>方式2:订购的对象 —&gt;查询订阅的数据—&gt;拉取需要的数据.<br><br></li>
</ul>
</li>
<li>本质上其实就是发送方与接收方的依赖隔离,也就是说数据发送方发送数据,<br>不是直接发送给订购的对象,而是先查询哪些订购了.然后统一发送出<br><br></li>
</ul>
<hr>
<h2 id="End"><a href="#End" class="headerlink" title="End"></a><center>End</center></h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;观察者模式&quot;&gt;&lt;a href=&quot;#观察者模式&quot; class=&quot;headerlink&quot; title=&quot;观察者模式&quot;&gt;&lt;/a&gt;观察者模式&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;观察者模式一般使用在订阅/推送功能下,数据提供方推送数据–&amp;gt;数据接收方.其实在开发中该模
    
    </summary>
    
      <category term="设计模式" scheme="https://lmxy1990.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>java volatile 关键字</title>
    <link href="https://lmxy1990.github.io/2016/12/29/java-volatile-%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <id>https://lmxy1990.github.io/2016/12/29/java-volatile-关键字/</id>
    <published>2016-12-29T12:56:42.000Z</published>
    <updated>2016-12-29T13:18:21.121Z</updated>
    
    <content type="html"><![CDATA[<p><br></p>
<h2 id="volatile关键字的使用"><a href="#volatile关键字的使用" class="headerlink" title="volatile关键字的使用"></a>volatile关键字的使用</h2><hr>
<ul>
<li>volatile关键字的作用是告诉编译器,该变量是易变的.不要将该变量的值存储在寄存器中,而是放在内存中(一般指的是静态也就是栈).</li>
<li>某些静态变量,如果使用频繁.可能会直接存放于寄存器中,以便加快计算的速度.但是,如果我们期望该值不应   该存在多个不一样的值时候,除了使用final定义为常量.还可以使用该关键字.</li>
<li>该关键字既可以避免一个变量出现多个值的可能,也可以避免常量的不可改变性.</li>
</ul>
<hr>
<p><br></p>
<h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点:"></a>注意点:</h3><ul>
<li>使用场景应该如下:<ul>
<li>多个线程中,该变量只能拥有一个对象.</li>
<li>该变量可能需要变化.即该变量需要动态创建/销毁.</li>
<li>它本身无法保证运行中只存在一个对象.它只是告诉jvm,<br>它的值需要从内存中去读取,而不是在寄存器(1级缓存/2级缓存/3级缓存)中获取该值.</li>
</ul>
</li>
<li>如果只是需要一个对象,使用final关键字即可.如果该对象使用不频繁,减少内存开销.可以使用该关键字,配合多线程的同步锁,可以实现单例.</li>
</ul>
<hr>
<center>End</center>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;volatile关键字的使用&quot;&gt;&lt;a href=&quot;#volatile关键字的使用&quot; class=&quot;headerlink&quot; title=&quot;volatile关键字的使用&quot;&gt;&lt;/a&gt;volatile关键字的使用&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li
    
    </summary>
    
      <category term="java" scheme="https://lmxy1990.github.io/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>设计模式之策略模式</title>
    <link href="https://lmxy1990.github.io/2016/12/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>https://lmxy1990.github.io/2016/12/28/设计模式之策略模式/</id>
    <published>2016-12-28T12:31:12.000Z</published>
    <updated>2016-12-29T14:18:46.623Z</updated>
    
    <content type="html"><![CDATA[<h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><p><br></p>
<hr>
<ul>
<li>策略模式是用于解决面向对象中的抽象类与接口的局限性.即一般的对类别进行抽象,对行为进行抽象为接口.这种方式在代码复用上有一定的局限性.而策略模式可以提高代码的复用.</li>
<li><p>eg:<br><pre><br>//定义一个接口,用于在抽象类都能调用到.(里氏替换原则)<br>interface Speak{</pre></p>
<p>void doSpeak() ;<br>}<br>// 实现接口1,其他类只要功能一样都可以采用它.<br>class SpeakCn implements Speak{<br>@Override<br>public void doSpeak() {</p>
<pre><code>System.out.println(&quot;中文&quot;);
</code></pre><p>}<br>}<br>//实现接口2,其他类只要功能一样都可以采用它.<br>class SpeakEn implements Speak{<br>@Override<br>public void doSpeak() {</p>
<pre><code>System.out.println(&quot;English&quot;);
</code></pre><p>}<br>}<br>//抽象类 使用接口来实现.将具体实现放到子类来实现接口.<br>abstract class man{<br>Speak speak ;<br>void speak(){</p>
<pre><code>speak.doSpeak();
</code></pre><p>}<br>}<br>class CnMan extends man{<br>//初始化赋值父类接口的实现,也可以采用Spring的初始化加载实现.<br>public  CnMan() {</p>
<pre><code>speak = new SpeakCn() ;
</code></pre><p>}<br>}<br>//使用<br>class test{<br>public void main(String[] args) {</p>
<pre><code>new CnMan().speak();
</code></pre><p>}<br>}<br></p>
<center>End</center></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;策略模式&quot;&gt;&lt;a href=&quot;#策略模式&quot; class=&quot;headerlink&quot; title=&quot;策略模式&quot;&gt;&lt;/a&gt;策略模式&lt;/h2&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;策略模式是用于解决面向对象中的抽象类与接口的局限性.即一般的对类别进行抽象,对
    
    </summary>
    
      <category term="设计模式" scheme="https://lmxy1990.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>Markdown 基础语法</title>
    <link href="https://lmxy1990.github.io/2016/12/28/Markdown-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <id>https://lmxy1990.github.io/2016/12/28/Markdown-基础语法/</id>
    <published>2016-12-28T08:06:14.000Z</published>
    <updated>2016-12-29T14:11:07.317Z</updated>
    
    <content type="html"><![CDATA[<h2 id="markdown基本语法"><a href="#markdown基本语法" class="headerlink" title="markdown基本语法."></a>markdown基本语法.</h2><h3 id="文字类"><a href="#文字类" class="headerlink" title="文字类"></a>文字类</h3><hr>
<ul>
<li>标题大小用<code>#</code>来标记,等同于html的<code>&lt;h1&gt;&lt;/h1&gt;</code>标签.</li>
<li>内容的强调使用<code>*</code>或<code>_</code> 来标记.</li>
</ul>
<ul>
<li>有序列表使用<code>数字.</code>来标记.</li>
</ul>
<ul>
<li>无序列表使用<code>* 或- 或+</code>来标记.</li>
</ul>
<ul>
<li>小代码使用2个`来标记.代码块使用6个`来标记.</li>
<li>如果需要显示单个代码,也可以使用\来标记该字符不被解析.</li>
<li>代码块一种更简便的方式是在开头使用一个tab+4个空格.</li>
</ul>
<ul>
<li>列表的嵌套使用tab+列表标记.</li>
</ul>
<ul>
<li>空行直接使用html的标记<code>&lt;br/&gt;</code><br><br></li>
</ul>
<h3 id="连接类"><a href="#连接类" class="headerlink" title="连接类"></a>连接类</h3><hr>
<ul>
<li>页面内的跳转.<ol>
<li>使用<code>&lt;span id =&quot;bijiao&quot;&gt;&lt;/span&gt;</code> 定义一个要跳转的地方.</li>
<li>使用<code>&lt;a href=&quot;#biaoqian&quot;&gt;跳&lt;/a&gt;</code>或者<code>[跳](#biaoqian)</code>来实现跳转.</li>
</ol>
</li>
<li>其他跳转.使用<code>&lt;a href=&quot;地址&quot;&gt;跳&lt;/a&gt;</code>或者<code>[跳](地址)</code>来实现跳转.</li>
</ul>
<h3 id="图片类"><a href="#图片类" class="headerlink" title="图片类"></a>图片类</h3><hr>
<ol>
<li>使用<code>&lt;img src=&quot;地址&quot;&gt;名称&lt;/img&gt;</code>或者<code>![名称](地址)</code>来实现.</li>
</ol>
<h3 id="音视频"><a href="#音视频" class="headerlink" title="音视频"></a>音视频</h3><hr>
<ol>
<li>声音:使用<code>&lt;audio src=&quot;地址&quot; autoplay=&quot;true&quot;&gt;声音&lt;/audio&gt;</code>来实现</li>
<li>视频:使用<code>&lt;video src=&quot;地址&quot; autoplay=&quot;true&quot;&gt;视频&lt;/video&gt;</code>来实现<br><br><br><br><h4 id="总结来说-mardown完全可以使用html标签来写-不过-html写起来麻烦-但是一些功能目前来说-markdown还不支持-所以只能采用html的标签来实现-来外-颜色样式的定义-好像也不可以-也只能用html-个人理解markdown只是html的一个框架-对html的一个封装"><a href="#总结来说-mardown完全可以使用html标签来写-不过-html写起来麻烦-但是一些功能目前来说-markdown还不支持-所以只能采用html的标签来实现-来外-颜色样式的定义-好像也不可以-也只能用html-个人理解markdown只是html的一个框架-对html的一个封装" class="headerlink" title="总结来说,mardown完全可以使用html标签来写.不过,html写起来麻烦.但是一些功能目前来说,markdown还不支持,所以只能采用html的标签来实现.来外,颜色样式的定义.好像也不可以.也只能用html.个人理解markdown只是html的一个框架.对html的一个封装."></a>总结来说,mardown完全可以使用html标签来写.不过,html写起来麻烦.但是一些功能目前来说,markdown还不支持,所以只能采用html的标签来实现.来外,颜色样式的定义.好像也不可以.也只能用html.个人理解markdown只是html的一个框架.对html的一个封装.</h4></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;markdown基本语法&quot;&gt;&lt;a href=&quot;#markdown基本语法&quot; class=&quot;headerlink&quot; title=&quot;markdown基本语法.&quot;&gt;&lt;/a&gt;markdown基本语法.&lt;/h2&gt;&lt;h3 id=&quot;文字类&quot;&gt;&lt;a href=&quot;#文字类&quot; cla
    
    </summary>
    
      <category term="markdown" scheme="https://lmxy1990.github.io/categories/markdown/"/>
    
    
      <category term="markdown" scheme="https://lmxy1990.github.io/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>git的使用</title>
    <link href="https://lmxy1990.github.io/2016/12/27/git%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://lmxy1990.github.io/2016/12/27/git的使用/</id>
    <published>2016-12-27T06:58:27.000Z</published>
    <updated>2016-12-27T07:23:27.730Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Git初次使用一般来说就5步"><a href="#Git初次使用一般来说就5步" class="headerlink" title="Git初次使用一般来说就5步."></a>Git初次使用一般来说就5步.</h2><ol>
<li><p>cd 你的目录  //进入你需要提交的目录.</p>
</li>
<li><p>git init //初始化.</p>
</li>
<li><p>git add * //添加需要提交的文件.</p>
</li>
<li><p>git commit -m “第一次提交”  //提交的说明.</p>
</li>
<li><p>git remote add origin <a href="https://github.com/lmxy1990/test.git" target="_blank" rel="external">https://github.com/lmxy1990/test.git</a> //添加远程仓库地址</p>
</li>
<li><p>git push -u origin master //提交 到主干</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Git初次使用一般来说就5步&quot;&gt;&lt;a href=&quot;#Git初次使用一般来说就5步&quot; class=&quot;headerlink&quot; title=&quot;Git初次使用一般来说就5步.&quot;&gt;&lt;/a&gt;Git初次使用一般来说就5步.&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;cd 你的目录  //
    
    </summary>
    
      <category term="Git初次使用" scheme="https://lmxy1990.github.io/categories/Git%E5%88%9D%E6%AC%A1%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="git" scheme="https://lmxy1990.github.io/tags/git/"/>
    
  </entry>
  
</feed>
